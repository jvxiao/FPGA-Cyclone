// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/30/2018 12:47:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    sig
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sig_vlg_sample_tst(
	clk,
	load,
	rst_n,
	sampler_tx
);
input  clk;
input  load;
input  rst_n;
output sampler_tx;

reg sample;
time current_time;
always @(clk or load or rst_n)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module sig_vlg_check_tst (
	led,
	seq_last6,
	state,
	sampler_rx
);
input  led;
input [5:0] seq_last6;
input [2:0] state;
input sampler_rx;

reg  led_expected;
reg [5:0] seq_last6_expected;
reg [2:0] state_expected;

reg  led_prev;
reg [5:0] seq_last6_prev;
reg [2:0] state_prev;

reg  led_expected_prev;
reg [5:0] seq_last6_expected_prev;
reg [2:0] state_expected_prev;

reg  last_led_exp;
reg [5:0] last_seq_last6_exp;
reg [2:0] last_state_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	led_prev = led;
	seq_last6_prev = seq_last6;
	state_prev = state;
end

// update expected /o prevs

always @(trigger)
begin
	led_expected_prev = led_expected;
	seq_last6_expected_prev = seq_last6_expected;
	state_expected_prev = state_expected;
end



// expected led
initial
begin
	led_expected = 1'bX;
	led_expected = #999000 1'b0;
end 
// expected seq_last6[ 5 ]
initial
begin
	seq_last6_expected[5] = 1'bX;
	seq_last6_expected[5] = #999000 1'b0;
end 
// expected seq_last6[ 4 ]
initial
begin
	seq_last6_expected[4] = 1'bX;
	seq_last6_expected[4] = #999000 1'b0;
end 
// expected seq_last6[ 3 ]
initial
begin
	seq_last6_expected[3] = 1'bX;
	seq_last6_expected[3] = #999000 1'b0;
end 
// expected seq_last6[ 2 ]
initial
begin
	seq_last6_expected[2] = 1'bX;
	seq_last6_expected[2] = #999000 1'b0;
end 
// expected seq_last6[ 1 ]
initial
begin
	seq_last6_expected[1] = 1'bX;
	seq_last6_expected[1] = #999000 1'b0;
end 
// expected seq_last6[ 0 ]
initial
begin
	seq_last6_expected[0] = 1'bX;
	seq_last6_expected[0] = #999000 1'b0;
end 
// expected state[ 2 ]
initial
begin
	state_expected[2] = 1'bX;
	state_expected[2] = #999000 1'b0;
end 
// expected state[ 1 ]
initial
begin
	state_expected[1] = 1'bX;
	state_expected[1] = #999000 1'b0;
end 
// expected state[ 0 ]
initial
begin
	state_expected[0] = 1'bX;
	state_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(led_expected or led or seq_last6_expected or seq_last6 or state_expected or state)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected led = %b | expected seq_last6 = %b | expected state = %b | ",led_expected_prev,seq_last6_expected_prev,state_expected_prev);
	$display("| real led = %b | real seq_last6 = %b | real state = %b | ",led_prev,seq_last6_prev,state_prev);
`endif
	if (
		( led_expected_prev !== 1'bx ) && ( led_prev !== led_expected_prev )
		&& ((led_expected_prev !== last_led_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_exp = led_expected_prev;
	end
	if (
		( seq_last6_expected_prev[0] !== 1'bx ) && ( seq_last6_prev[0] !== seq_last6_expected_prev[0] )
		&& ((seq_last6_expected_prev[0] !== last_seq_last6_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seq_last6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seq_last6_expected_prev);
		$display ("     Real value = %b", seq_last6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seq_last6_exp[0] = seq_last6_expected_prev[0];
	end
	if (
		( seq_last6_expected_prev[1] !== 1'bx ) && ( seq_last6_prev[1] !== seq_last6_expected_prev[1] )
		&& ((seq_last6_expected_prev[1] !== last_seq_last6_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seq_last6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seq_last6_expected_prev);
		$display ("     Real value = %b", seq_last6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seq_last6_exp[1] = seq_last6_expected_prev[1];
	end
	if (
		( seq_last6_expected_prev[2] !== 1'bx ) && ( seq_last6_prev[2] !== seq_last6_expected_prev[2] )
		&& ((seq_last6_expected_prev[2] !== last_seq_last6_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seq_last6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seq_last6_expected_prev);
		$display ("     Real value = %b", seq_last6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seq_last6_exp[2] = seq_last6_expected_prev[2];
	end
	if (
		( seq_last6_expected_prev[3] !== 1'bx ) && ( seq_last6_prev[3] !== seq_last6_expected_prev[3] )
		&& ((seq_last6_expected_prev[3] !== last_seq_last6_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seq_last6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seq_last6_expected_prev);
		$display ("     Real value = %b", seq_last6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seq_last6_exp[3] = seq_last6_expected_prev[3];
	end
	if (
		( seq_last6_expected_prev[4] !== 1'bx ) && ( seq_last6_prev[4] !== seq_last6_expected_prev[4] )
		&& ((seq_last6_expected_prev[4] !== last_seq_last6_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seq_last6[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seq_last6_expected_prev);
		$display ("     Real value = %b", seq_last6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seq_last6_exp[4] = seq_last6_expected_prev[4];
	end
	if (
		( seq_last6_expected_prev[5] !== 1'bx ) && ( seq_last6_prev[5] !== seq_last6_expected_prev[5] )
		&& ((seq_last6_expected_prev[5] !== last_seq_last6_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seq_last6[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seq_last6_expected_prev);
		$display ("     Real value = %b", seq_last6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seq_last6_exp[5] = seq_last6_expected_prev[5];
	end
	if (
		( state_expected_prev[0] !== 1'bx ) && ( state_prev[0] !== state_expected_prev[0] )
		&& ((state_expected_prev[0] !== last_state_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_state_exp[0] = state_expected_prev[0];
	end
	if (
		( state_expected_prev[1] !== 1'bx ) && ( state_prev[1] !== state_expected_prev[1] )
		&& ((state_expected_prev[1] !== last_state_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_state_exp[1] = state_expected_prev[1];
	end
	if (
		( state_expected_prev[2] !== 1'bx ) && ( state_prev[2] !== state_expected_prev[2] )
		&& ((state_expected_prev[2] !== last_state_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_state_exp[2] = state_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#20000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module sig_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg load;
reg rst_n;
// wires                                               
wire led;
wire [5:0] seq_last6;
wire [2:0] state;

wire sampler;                             

// assign statements (if any)                          
sig i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.led(led),
	.load(load),
	.rst_n(rst_n),
	.seq_last6(seq_last6),
	.state(state)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// load
initial
begin
	load = 1'b1;
	load = #5920000 1'b0;
	load = #2080000 1'b1;
end 

// rst_n
initial
begin
	rst_n = 1'b1;
	rst_n = #2560000 1'b0;
	rst_n = #640000 1'b1;
end 

sig_vlg_sample_tst tb_sample (
	.clk(clk),
	.load(load),
	.rst_n(rst_n),
	.sampler_tx(sampler)
);

sig_vlg_check_tst tb_out(
	.led(led),
	.seq_last6(seq_last6),
	.state(state),
	.sampler_rx(sampler)
);
endmodule

