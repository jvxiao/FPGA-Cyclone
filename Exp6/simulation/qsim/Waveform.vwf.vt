// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/07/2018 22:15:15"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    digitalclock
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module digitalclock_vlg_sample_tst(
	ad_hr,
	ad_min,
	ad_sec,
	clk,
	rst,
	sampler_tx
);
input  ad_hr;
input  ad_min;
input  ad_sec;
input  clk;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(ad_hr or ad_min or ad_sec or clk or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module digitalclock_vlg_check_tst (
	Hr_g,
	Hr_s,
	Min_g,
	Min_s,
	Sec_g,
	Sec_s,
	cnt_hr,
	cnt_min,
	cnt_sec,
	sampler_rx
);
input [6:0] Hr_g;
input [6:0] Hr_s;
input [6:0] Min_g;
input [6:0] Min_s;
input [6:0] Sec_g;
input [6:0] Sec_s;
input [7:0] cnt_hr;
input [7:0] cnt_min;
input [7:0] cnt_sec;
input sampler_rx;

reg [6:0] Hr_g_expected;
reg [6:0] Hr_s_expected;
reg [6:0] Min_g_expected;
reg [6:0] Min_s_expected;
reg [6:0] Sec_g_expected;
reg [6:0] Sec_s_expected;
reg [7:0] cnt_hr_expected;
reg [7:0] cnt_min_expected;
reg [7:0] cnt_sec_expected;

reg [6:0] Hr_g_prev;
reg [6:0] Hr_s_prev;
reg [6:0] Min_g_prev;
reg [6:0] Min_s_prev;
reg [6:0] Sec_g_prev;
reg [6:0] Sec_s_prev;
reg [7:0] cnt_hr_prev;
reg [7:0] cnt_min_prev;
reg [7:0] cnt_sec_prev;

reg [6:0] Hr_g_expected_prev;
reg [6:0] Hr_s_expected_prev;
reg [6:0] Min_g_expected_prev;
reg [6:0] Min_s_expected_prev;
reg [6:0] Sec_g_expected_prev;
reg [6:0] Sec_s_expected_prev;
reg [7:0] cnt_hr_expected_prev;
reg [7:0] cnt_min_expected_prev;
reg [7:0] cnt_sec_expected_prev;

reg [6:0] last_Hr_g_exp;
reg [6:0] last_Hr_s_exp;
reg [6:0] last_Min_g_exp;
reg [6:0] last_Min_s_exp;
reg [6:0] last_Sec_g_exp;
reg [6:0] last_Sec_s_exp;
reg [7:0] last_cnt_hr_exp;
reg [7:0] last_cnt_min_exp;
reg [7:0] last_cnt_sec_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	Hr_g_prev = Hr_g;
	Hr_s_prev = Hr_s;
	Min_g_prev = Min_g;
	Min_s_prev = Min_s;
	Sec_g_prev = Sec_g;
	Sec_s_prev = Sec_s;
	cnt_hr_prev = cnt_hr;
	cnt_min_prev = cnt_min;
	cnt_sec_prev = cnt_sec;
end

// update expected /o prevs

always @(trigger)
begin
	Hr_g_expected_prev = Hr_g_expected;
	Hr_s_expected_prev = Hr_s_expected;
	Min_g_expected_prev = Min_g_expected;
	Min_s_expected_prev = Min_s_expected;
	Sec_g_expected_prev = Sec_g_expected;
	Sec_s_expected_prev = Sec_s_expected;
	cnt_hr_expected_prev = cnt_hr_expected;
	cnt_min_expected_prev = cnt_min_expected;
	cnt_sec_expected_prev = cnt_sec_expected;
end


// expected cnt_sec[ 7 ]
initial
begin
	cnt_sec_expected[7] = 1'bX;
	cnt_sec_expected[7] = #999000 1'b0;
end 
// expected cnt_sec[ 6 ]
initial
begin
	cnt_sec_expected[6] = 1'bX;
	cnt_sec_expected[6] = #999000 1'b0;
end 
// expected cnt_sec[ 5 ]
initial
begin
	cnt_sec_expected[5] = 1'bX;
	cnt_sec_expected[5] = #999000 1'b0;
end 
// expected cnt_sec[ 4 ]
initial
begin
	cnt_sec_expected[4] = 1'bX;
	cnt_sec_expected[4] = #999000 1'b0;
end 
// expected cnt_sec[ 3 ]
initial
begin
	cnt_sec_expected[3] = 1'bX;
	cnt_sec_expected[3] = #999000 1'b0;
end 
// expected cnt_sec[ 2 ]
initial
begin
	cnt_sec_expected[2] = 1'bX;
	cnt_sec_expected[2] = #999000 1'b0;
end 
// expected cnt_sec[ 1 ]
initial
begin
	cnt_sec_expected[1] = 1'bX;
	cnt_sec_expected[1] = #999000 1'b0;
end 
// expected cnt_sec[ 0 ]
initial
begin
	cnt_sec_expected[0] = 1'bX;
	cnt_sec_expected[0] = #999000 1'b0;
end 
// expected Hr_g[ 6 ]
initial
begin
	Hr_g_expected[6] = 1'bX;
	Hr_g_expected[6] = #999000 1'b0;
end 
// expected Hr_g[ 5 ]
initial
begin
	Hr_g_expected[5] = 1'bX;
	Hr_g_expected[5] = #999000 1'b0;
end 
// expected Hr_g[ 4 ]
initial
begin
	Hr_g_expected[4] = 1'bX;
	Hr_g_expected[4] = #999000 1'b0;
end 
// expected Hr_g[ 3 ]
initial
begin
	Hr_g_expected[3] = 1'bX;
	Hr_g_expected[3] = #999000 1'b0;
end 
// expected Hr_g[ 2 ]
initial
begin
	Hr_g_expected[2] = 1'bX;
	Hr_g_expected[2] = #999000 1'b0;
end 
// expected Hr_g[ 1 ]
initial
begin
	Hr_g_expected[1] = 1'bX;
	Hr_g_expected[1] = #999000 1'b0;
end 
// expected Hr_g[ 0 ]
initial
begin
	Hr_g_expected[0] = 1'bX;
	Hr_g_expected[0] = #999000 1'b0;
end 
// expected Hr_s[ 6 ]
initial
begin
	Hr_s_expected[6] = 1'bX;
	Hr_s_expected[6] = #999000 1'b0;
end 
// expected Hr_s[ 5 ]
initial
begin
	Hr_s_expected[5] = 1'bX;
	Hr_s_expected[5] = #999000 1'b0;
end 
// expected Hr_s[ 4 ]
initial
begin
	Hr_s_expected[4] = 1'bX;
	Hr_s_expected[4] = #999000 1'b0;
end 
// expected Hr_s[ 3 ]
initial
begin
	Hr_s_expected[3] = 1'bX;
	Hr_s_expected[3] = #999000 1'b0;
end 
// expected Hr_s[ 2 ]
initial
begin
	Hr_s_expected[2] = 1'bX;
	Hr_s_expected[2] = #999000 1'b0;
end 
// expected Hr_s[ 1 ]
initial
begin
	Hr_s_expected[1] = 1'bX;
	Hr_s_expected[1] = #999000 1'b0;
end 
// expected Hr_s[ 0 ]
initial
begin
	Hr_s_expected[0] = 1'bX;
	Hr_s_expected[0] = #999000 1'b0;
end 
// expected Min_g[ 6 ]
initial
begin
	Min_g_expected[6] = 1'bX;
	Min_g_expected[6] = #999000 1'b0;
end 
// expected Min_g[ 5 ]
initial
begin
	Min_g_expected[5] = 1'bX;
	Min_g_expected[5] = #999000 1'b0;
end 
// expected Min_g[ 4 ]
initial
begin
	Min_g_expected[4] = 1'bX;
	Min_g_expected[4] = #999000 1'b0;
end 
// expected Min_g[ 3 ]
initial
begin
	Min_g_expected[3] = 1'bX;
	Min_g_expected[3] = #999000 1'b0;
end 
// expected Min_g[ 2 ]
initial
begin
	Min_g_expected[2] = 1'bX;
	Min_g_expected[2] = #999000 1'b0;
end 
// expected Min_g[ 1 ]
initial
begin
	Min_g_expected[1] = 1'bX;
	Min_g_expected[1] = #999000 1'b0;
end 
// expected Min_g[ 0 ]
initial
begin
	Min_g_expected[0] = 1'bX;
	Min_g_expected[0] = #999000 1'b0;
end 
// expected Min_s[ 6 ]
initial
begin
	Min_s_expected[6] = 1'bX;
	Min_s_expected[6] = #999000 1'b0;
end 
// expected Min_s[ 5 ]
initial
begin
	Min_s_expected[5] = 1'bX;
	Min_s_expected[5] = #999000 1'b0;
end 
// expected Min_s[ 4 ]
initial
begin
	Min_s_expected[4] = 1'bX;
	Min_s_expected[4] = #999000 1'b0;
end 
// expected Min_s[ 3 ]
initial
begin
	Min_s_expected[3] = 1'bX;
	Min_s_expected[3] = #999000 1'b0;
end 
// expected Min_s[ 2 ]
initial
begin
	Min_s_expected[2] = 1'bX;
	Min_s_expected[2] = #999000 1'b0;
end 
// expected Min_s[ 1 ]
initial
begin
	Min_s_expected[1] = 1'bX;
	Min_s_expected[1] = #999000 1'b0;
end 
// expected Min_s[ 0 ]
initial
begin
	Min_s_expected[0] = 1'bX;
	Min_s_expected[0] = #999000 1'b0;
end 
// expected Sec_g[ 6 ]
initial
begin
	Sec_g_expected[6] = 1'bX;
	Sec_g_expected[6] = #999000 1'b0;
end 
// expected Sec_g[ 5 ]
initial
begin
	Sec_g_expected[5] = 1'bX;
	Sec_g_expected[5] = #999000 1'b0;
end 
// expected Sec_g[ 4 ]
initial
begin
	Sec_g_expected[4] = 1'bX;
	Sec_g_expected[4] = #999000 1'b0;
end 
// expected Sec_g[ 3 ]
initial
begin
	Sec_g_expected[3] = 1'bX;
	Sec_g_expected[3] = #999000 1'b0;
end 
// expected Sec_g[ 2 ]
initial
begin
	Sec_g_expected[2] = 1'bX;
	Sec_g_expected[2] = #999000 1'b0;
end 
// expected Sec_g[ 1 ]
initial
begin
	Sec_g_expected[1] = 1'bX;
	Sec_g_expected[1] = #999000 1'b0;
end 
// expected Sec_g[ 0 ]
initial
begin
	Sec_g_expected[0] = 1'bX;
	Sec_g_expected[0] = #999000 1'b0;
end 
// expected Sec_s[ 6 ]
initial
begin
	Sec_s_expected[6] = 1'bX;
	Sec_s_expected[6] = #999000 1'b0;
end 
// expected Sec_s[ 5 ]
initial
begin
	Sec_s_expected[5] = 1'bX;
	Sec_s_expected[5] = #999000 1'b0;
end 
// expected Sec_s[ 4 ]
initial
begin
	Sec_s_expected[4] = 1'bX;
	Sec_s_expected[4] = #999000 1'b0;
end 
// expected Sec_s[ 3 ]
initial
begin
	Sec_s_expected[3] = 1'bX;
	Sec_s_expected[3] = #999000 1'b0;
end 
// expected Sec_s[ 2 ]
initial
begin
	Sec_s_expected[2] = 1'bX;
	Sec_s_expected[2] = #999000 1'b0;
end 
// expected Sec_s[ 1 ]
initial
begin
	Sec_s_expected[1] = 1'bX;
	Sec_s_expected[1] = #999000 1'b0;
end 
// expected Sec_s[ 0 ]
initial
begin
	Sec_s_expected[0] = 1'bX;
	Sec_s_expected[0] = #999000 1'b0;
end 
// expected cnt_hr[ 7 ]
initial
begin
	cnt_hr_expected[7] = 1'bX;
	cnt_hr_expected[7] = #999000 1'b0;
end 
// expected cnt_hr[ 6 ]
initial
begin
	cnt_hr_expected[6] = 1'bX;
	cnt_hr_expected[6] = #999000 1'b0;
end 
// expected cnt_hr[ 5 ]
initial
begin
	cnt_hr_expected[5] = 1'bX;
	cnt_hr_expected[5] = #999000 1'b0;
end 
// expected cnt_hr[ 4 ]
initial
begin
	cnt_hr_expected[4] = 1'bX;
	cnt_hr_expected[4] = #999000 1'b0;
end 
// expected cnt_hr[ 3 ]
initial
begin
	cnt_hr_expected[3] = 1'bX;
	cnt_hr_expected[3] = #999000 1'b0;
end 
// expected cnt_hr[ 2 ]
initial
begin
	cnt_hr_expected[2] = 1'bX;
	cnt_hr_expected[2] = #999000 1'b0;
end 
// expected cnt_hr[ 1 ]
initial
begin
	cnt_hr_expected[1] = 1'bX;
	cnt_hr_expected[1] = #999000 1'b0;
end 
// expected cnt_hr[ 0 ]
initial
begin
	cnt_hr_expected[0] = 1'bX;
	cnt_hr_expected[0] = #999000 1'b0;
end 
// expected cnt_min[ 7 ]
initial
begin
	cnt_min_expected[7] = 1'bX;
	cnt_min_expected[7] = #999000 1'b0;
end 
// expected cnt_min[ 6 ]
initial
begin
	cnt_min_expected[6] = 1'bX;
	cnt_min_expected[6] = #999000 1'b0;
end 
// expected cnt_min[ 5 ]
initial
begin
	cnt_min_expected[5] = 1'bX;
	cnt_min_expected[5] = #999000 1'b0;
end 
// expected cnt_min[ 4 ]
initial
begin
	cnt_min_expected[4] = 1'bX;
	cnt_min_expected[4] = #999000 1'b0;
end 
// expected cnt_min[ 3 ]
initial
begin
	cnt_min_expected[3] = 1'bX;
	cnt_min_expected[3] = #999000 1'b0;
end 
// expected cnt_min[ 2 ]
initial
begin
	cnt_min_expected[2] = 1'bX;
	cnt_min_expected[2] = #999000 1'b0;
end 
// expected cnt_min[ 1 ]
initial
begin
	cnt_min_expected[1] = 1'bX;
	cnt_min_expected[1] = #999000 1'b0;
end 
// expected cnt_min[ 0 ]
initial
begin
	cnt_min_expected[0] = 1'bX;
	cnt_min_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(Hr_g_expected or Hr_g or Hr_s_expected or Hr_s or Min_g_expected or Min_g or Min_s_expected or Min_s or Sec_g_expected or Sec_g or Sec_s_expected or Sec_s or cnt_hr_expected or cnt_hr or cnt_min_expected or cnt_min or cnt_sec_expected or cnt_sec)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Hr_g = %b | expected Hr_s = %b | expected Min_g = %b | expected Min_s = %b | expected Sec_g = %b | expected Sec_s = %b | expected cnt_hr = %b | expected cnt_min = %b | expected cnt_sec = %b | ",Hr_g_expected_prev,Hr_s_expected_prev,Min_g_expected_prev,Min_s_expected_prev,Sec_g_expected_prev,Sec_s_expected_prev,cnt_hr_expected_prev,cnt_min_expected_prev,cnt_sec_expected_prev);
	$display("| real Hr_g = %b | real Hr_s = %b | real Min_g = %b | real Min_s = %b | real Sec_g = %b | real Sec_s = %b | real cnt_hr = %b | real cnt_min = %b | real cnt_sec = %b | ",Hr_g_prev,Hr_s_prev,Min_g_prev,Min_s_prev,Sec_g_prev,Sec_s_prev,cnt_hr_prev,cnt_min_prev,cnt_sec_prev);
`endif
	if (
		( Hr_g_expected_prev[0] !== 1'bx ) && ( Hr_g_prev[0] !== Hr_g_expected_prev[0] )
		&& ((Hr_g_expected_prev[0] !== last_Hr_g_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hr_g[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hr_g_expected_prev);
		$display ("     Real value = %b", Hr_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Hr_g_exp[0] = Hr_g_expected_prev[0];
	end
	if (
		( Hr_g_expected_prev[1] !== 1'bx ) && ( Hr_g_prev[1] !== Hr_g_expected_prev[1] )
		&& ((Hr_g_expected_prev[1] !== last_Hr_g_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hr_g[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hr_g_expected_prev);
		$display ("     Real value = %b", Hr_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Hr_g_exp[1] = Hr_g_expected_prev[1];
	end
	if (
		( Hr_g_expected_prev[2] !== 1'bx ) && ( Hr_g_prev[2] !== Hr_g_expected_prev[2] )
		&& ((Hr_g_expected_prev[2] !== last_Hr_g_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hr_g[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hr_g_expected_prev);
		$display ("     Real value = %b", Hr_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Hr_g_exp[2] = Hr_g_expected_prev[2];
	end
	if (
		( Hr_g_expected_prev[3] !== 1'bx ) && ( Hr_g_prev[3] !== Hr_g_expected_prev[3] )
		&& ((Hr_g_expected_prev[3] !== last_Hr_g_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hr_g[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hr_g_expected_prev);
		$display ("     Real value = %b", Hr_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Hr_g_exp[3] = Hr_g_expected_prev[3];
	end
	if (
		( Hr_g_expected_prev[4] !== 1'bx ) && ( Hr_g_prev[4] !== Hr_g_expected_prev[4] )
		&& ((Hr_g_expected_prev[4] !== last_Hr_g_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hr_g[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hr_g_expected_prev);
		$display ("     Real value = %b", Hr_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Hr_g_exp[4] = Hr_g_expected_prev[4];
	end
	if (
		( Hr_g_expected_prev[5] !== 1'bx ) && ( Hr_g_prev[5] !== Hr_g_expected_prev[5] )
		&& ((Hr_g_expected_prev[5] !== last_Hr_g_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hr_g[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hr_g_expected_prev);
		$display ("     Real value = %b", Hr_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Hr_g_exp[5] = Hr_g_expected_prev[5];
	end
	if (
		( Hr_g_expected_prev[6] !== 1'bx ) && ( Hr_g_prev[6] !== Hr_g_expected_prev[6] )
		&& ((Hr_g_expected_prev[6] !== last_Hr_g_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hr_g[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hr_g_expected_prev);
		$display ("     Real value = %b", Hr_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Hr_g_exp[6] = Hr_g_expected_prev[6];
	end
	if (
		( Hr_s_expected_prev[0] !== 1'bx ) && ( Hr_s_prev[0] !== Hr_s_expected_prev[0] )
		&& ((Hr_s_expected_prev[0] !== last_Hr_s_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hr_s[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hr_s_expected_prev);
		$display ("     Real value = %b", Hr_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Hr_s_exp[0] = Hr_s_expected_prev[0];
	end
	if (
		( Hr_s_expected_prev[1] !== 1'bx ) && ( Hr_s_prev[1] !== Hr_s_expected_prev[1] )
		&& ((Hr_s_expected_prev[1] !== last_Hr_s_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hr_s[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hr_s_expected_prev);
		$display ("     Real value = %b", Hr_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Hr_s_exp[1] = Hr_s_expected_prev[1];
	end
	if (
		( Hr_s_expected_prev[2] !== 1'bx ) && ( Hr_s_prev[2] !== Hr_s_expected_prev[2] )
		&& ((Hr_s_expected_prev[2] !== last_Hr_s_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hr_s[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hr_s_expected_prev);
		$display ("     Real value = %b", Hr_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Hr_s_exp[2] = Hr_s_expected_prev[2];
	end
	if (
		( Hr_s_expected_prev[3] !== 1'bx ) && ( Hr_s_prev[3] !== Hr_s_expected_prev[3] )
		&& ((Hr_s_expected_prev[3] !== last_Hr_s_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hr_s[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hr_s_expected_prev);
		$display ("     Real value = %b", Hr_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Hr_s_exp[3] = Hr_s_expected_prev[3];
	end
	if (
		( Hr_s_expected_prev[4] !== 1'bx ) && ( Hr_s_prev[4] !== Hr_s_expected_prev[4] )
		&& ((Hr_s_expected_prev[4] !== last_Hr_s_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hr_s[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hr_s_expected_prev);
		$display ("     Real value = %b", Hr_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Hr_s_exp[4] = Hr_s_expected_prev[4];
	end
	if (
		( Hr_s_expected_prev[5] !== 1'bx ) && ( Hr_s_prev[5] !== Hr_s_expected_prev[5] )
		&& ((Hr_s_expected_prev[5] !== last_Hr_s_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hr_s[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hr_s_expected_prev);
		$display ("     Real value = %b", Hr_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Hr_s_exp[5] = Hr_s_expected_prev[5];
	end
	if (
		( Hr_s_expected_prev[6] !== 1'bx ) && ( Hr_s_prev[6] !== Hr_s_expected_prev[6] )
		&& ((Hr_s_expected_prev[6] !== last_Hr_s_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hr_s[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hr_s_expected_prev);
		$display ("     Real value = %b", Hr_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Hr_s_exp[6] = Hr_s_expected_prev[6];
	end
	if (
		( Min_g_expected_prev[0] !== 1'bx ) && ( Min_g_prev[0] !== Min_g_expected_prev[0] )
		&& ((Min_g_expected_prev[0] !== last_Min_g_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Min_g[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Min_g_expected_prev);
		$display ("     Real value = %b", Min_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Min_g_exp[0] = Min_g_expected_prev[0];
	end
	if (
		( Min_g_expected_prev[1] !== 1'bx ) && ( Min_g_prev[1] !== Min_g_expected_prev[1] )
		&& ((Min_g_expected_prev[1] !== last_Min_g_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Min_g[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Min_g_expected_prev);
		$display ("     Real value = %b", Min_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Min_g_exp[1] = Min_g_expected_prev[1];
	end
	if (
		( Min_g_expected_prev[2] !== 1'bx ) && ( Min_g_prev[2] !== Min_g_expected_prev[2] )
		&& ((Min_g_expected_prev[2] !== last_Min_g_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Min_g[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Min_g_expected_prev);
		$display ("     Real value = %b", Min_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Min_g_exp[2] = Min_g_expected_prev[2];
	end
	if (
		( Min_g_expected_prev[3] !== 1'bx ) && ( Min_g_prev[3] !== Min_g_expected_prev[3] )
		&& ((Min_g_expected_prev[3] !== last_Min_g_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Min_g[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Min_g_expected_prev);
		$display ("     Real value = %b", Min_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Min_g_exp[3] = Min_g_expected_prev[3];
	end
	if (
		( Min_g_expected_prev[4] !== 1'bx ) && ( Min_g_prev[4] !== Min_g_expected_prev[4] )
		&& ((Min_g_expected_prev[4] !== last_Min_g_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Min_g[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Min_g_expected_prev);
		$display ("     Real value = %b", Min_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Min_g_exp[4] = Min_g_expected_prev[4];
	end
	if (
		( Min_g_expected_prev[5] !== 1'bx ) && ( Min_g_prev[5] !== Min_g_expected_prev[5] )
		&& ((Min_g_expected_prev[5] !== last_Min_g_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Min_g[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Min_g_expected_prev);
		$display ("     Real value = %b", Min_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Min_g_exp[5] = Min_g_expected_prev[5];
	end
	if (
		( Min_g_expected_prev[6] !== 1'bx ) && ( Min_g_prev[6] !== Min_g_expected_prev[6] )
		&& ((Min_g_expected_prev[6] !== last_Min_g_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Min_g[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Min_g_expected_prev);
		$display ("     Real value = %b", Min_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Min_g_exp[6] = Min_g_expected_prev[6];
	end
	if (
		( Min_s_expected_prev[0] !== 1'bx ) && ( Min_s_prev[0] !== Min_s_expected_prev[0] )
		&& ((Min_s_expected_prev[0] !== last_Min_s_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Min_s[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Min_s_expected_prev);
		$display ("     Real value = %b", Min_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Min_s_exp[0] = Min_s_expected_prev[0];
	end
	if (
		( Min_s_expected_prev[1] !== 1'bx ) && ( Min_s_prev[1] !== Min_s_expected_prev[1] )
		&& ((Min_s_expected_prev[1] !== last_Min_s_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Min_s[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Min_s_expected_prev);
		$display ("     Real value = %b", Min_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Min_s_exp[1] = Min_s_expected_prev[1];
	end
	if (
		( Min_s_expected_prev[2] !== 1'bx ) && ( Min_s_prev[2] !== Min_s_expected_prev[2] )
		&& ((Min_s_expected_prev[2] !== last_Min_s_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Min_s[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Min_s_expected_prev);
		$display ("     Real value = %b", Min_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Min_s_exp[2] = Min_s_expected_prev[2];
	end
	if (
		( Min_s_expected_prev[3] !== 1'bx ) && ( Min_s_prev[3] !== Min_s_expected_prev[3] )
		&& ((Min_s_expected_prev[3] !== last_Min_s_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Min_s[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Min_s_expected_prev);
		$display ("     Real value = %b", Min_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Min_s_exp[3] = Min_s_expected_prev[3];
	end
	if (
		( Min_s_expected_prev[4] !== 1'bx ) && ( Min_s_prev[4] !== Min_s_expected_prev[4] )
		&& ((Min_s_expected_prev[4] !== last_Min_s_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Min_s[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Min_s_expected_prev);
		$display ("     Real value = %b", Min_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Min_s_exp[4] = Min_s_expected_prev[4];
	end
	if (
		( Min_s_expected_prev[5] !== 1'bx ) && ( Min_s_prev[5] !== Min_s_expected_prev[5] )
		&& ((Min_s_expected_prev[5] !== last_Min_s_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Min_s[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Min_s_expected_prev);
		$display ("     Real value = %b", Min_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Min_s_exp[5] = Min_s_expected_prev[5];
	end
	if (
		( Min_s_expected_prev[6] !== 1'bx ) && ( Min_s_prev[6] !== Min_s_expected_prev[6] )
		&& ((Min_s_expected_prev[6] !== last_Min_s_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Min_s[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Min_s_expected_prev);
		$display ("     Real value = %b", Min_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Min_s_exp[6] = Min_s_expected_prev[6];
	end
	if (
		( Sec_g_expected_prev[0] !== 1'bx ) && ( Sec_g_prev[0] !== Sec_g_expected_prev[0] )
		&& ((Sec_g_expected_prev[0] !== last_Sec_g_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sec_g[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sec_g_expected_prev);
		$display ("     Real value = %b", Sec_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Sec_g_exp[0] = Sec_g_expected_prev[0];
	end
	if (
		( Sec_g_expected_prev[1] !== 1'bx ) && ( Sec_g_prev[1] !== Sec_g_expected_prev[1] )
		&& ((Sec_g_expected_prev[1] !== last_Sec_g_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sec_g[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sec_g_expected_prev);
		$display ("     Real value = %b", Sec_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Sec_g_exp[1] = Sec_g_expected_prev[1];
	end
	if (
		( Sec_g_expected_prev[2] !== 1'bx ) && ( Sec_g_prev[2] !== Sec_g_expected_prev[2] )
		&& ((Sec_g_expected_prev[2] !== last_Sec_g_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sec_g[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sec_g_expected_prev);
		$display ("     Real value = %b", Sec_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Sec_g_exp[2] = Sec_g_expected_prev[2];
	end
	if (
		( Sec_g_expected_prev[3] !== 1'bx ) && ( Sec_g_prev[3] !== Sec_g_expected_prev[3] )
		&& ((Sec_g_expected_prev[3] !== last_Sec_g_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sec_g[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sec_g_expected_prev);
		$display ("     Real value = %b", Sec_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Sec_g_exp[3] = Sec_g_expected_prev[3];
	end
	if (
		( Sec_g_expected_prev[4] !== 1'bx ) && ( Sec_g_prev[4] !== Sec_g_expected_prev[4] )
		&& ((Sec_g_expected_prev[4] !== last_Sec_g_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sec_g[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sec_g_expected_prev);
		$display ("     Real value = %b", Sec_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Sec_g_exp[4] = Sec_g_expected_prev[4];
	end
	if (
		( Sec_g_expected_prev[5] !== 1'bx ) && ( Sec_g_prev[5] !== Sec_g_expected_prev[5] )
		&& ((Sec_g_expected_prev[5] !== last_Sec_g_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sec_g[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sec_g_expected_prev);
		$display ("     Real value = %b", Sec_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Sec_g_exp[5] = Sec_g_expected_prev[5];
	end
	if (
		( Sec_g_expected_prev[6] !== 1'bx ) && ( Sec_g_prev[6] !== Sec_g_expected_prev[6] )
		&& ((Sec_g_expected_prev[6] !== last_Sec_g_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sec_g[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sec_g_expected_prev);
		$display ("     Real value = %b", Sec_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Sec_g_exp[6] = Sec_g_expected_prev[6];
	end
	if (
		( Sec_s_expected_prev[0] !== 1'bx ) && ( Sec_s_prev[0] !== Sec_s_expected_prev[0] )
		&& ((Sec_s_expected_prev[0] !== last_Sec_s_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sec_s[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sec_s_expected_prev);
		$display ("     Real value = %b", Sec_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Sec_s_exp[0] = Sec_s_expected_prev[0];
	end
	if (
		( Sec_s_expected_prev[1] !== 1'bx ) && ( Sec_s_prev[1] !== Sec_s_expected_prev[1] )
		&& ((Sec_s_expected_prev[1] !== last_Sec_s_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sec_s[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sec_s_expected_prev);
		$display ("     Real value = %b", Sec_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Sec_s_exp[1] = Sec_s_expected_prev[1];
	end
	if (
		( Sec_s_expected_prev[2] !== 1'bx ) && ( Sec_s_prev[2] !== Sec_s_expected_prev[2] )
		&& ((Sec_s_expected_prev[2] !== last_Sec_s_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sec_s[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sec_s_expected_prev);
		$display ("     Real value = %b", Sec_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Sec_s_exp[2] = Sec_s_expected_prev[2];
	end
	if (
		( Sec_s_expected_prev[3] !== 1'bx ) && ( Sec_s_prev[3] !== Sec_s_expected_prev[3] )
		&& ((Sec_s_expected_prev[3] !== last_Sec_s_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sec_s[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sec_s_expected_prev);
		$display ("     Real value = %b", Sec_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Sec_s_exp[3] = Sec_s_expected_prev[3];
	end
	if (
		( Sec_s_expected_prev[4] !== 1'bx ) && ( Sec_s_prev[4] !== Sec_s_expected_prev[4] )
		&& ((Sec_s_expected_prev[4] !== last_Sec_s_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sec_s[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sec_s_expected_prev);
		$display ("     Real value = %b", Sec_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Sec_s_exp[4] = Sec_s_expected_prev[4];
	end
	if (
		( Sec_s_expected_prev[5] !== 1'bx ) && ( Sec_s_prev[5] !== Sec_s_expected_prev[5] )
		&& ((Sec_s_expected_prev[5] !== last_Sec_s_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sec_s[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sec_s_expected_prev);
		$display ("     Real value = %b", Sec_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Sec_s_exp[5] = Sec_s_expected_prev[5];
	end
	if (
		( Sec_s_expected_prev[6] !== 1'bx ) && ( Sec_s_prev[6] !== Sec_s_expected_prev[6] )
		&& ((Sec_s_expected_prev[6] !== last_Sec_s_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sec_s[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sec_s_expected_prev);
		$display ("     Real value = %b", Sec_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Sec_s_exp[6] = Sec_s_expected_prev[6];
	end
	if (
		( cnt_hr_expected_prev[0] !== 1'bx ) && ( cnt_hr_prev[0] !== cnt_hr_expected_prev[0] )
		&& ((cnt_hr_expected_prev[0] !== last_cnt_hr_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt_hr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_hr_expected_prev);
		$display ("     Real value = %b", cnt_hr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cnt_hr_exp[0] = cnt_hr_expected_prev[0];
	end
	if (
		( cnt_hr_expected_prev[1] !== 1'bx ) && ( cnt_hr_prev[1] !== cnt_hr_expected_prev[1] )
		&& ((cnt_hr_expected_prev[1] !== last_cnt_hr_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt_hr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_hr_expected_prev);
		$display ("     Real value = %b", cnt_hr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cnt_hr_exp[1] = cnt_hr_expected_prev[1];
	end
	if (
		( cnt_hr_expected_prev[2] !== 1'bx ) && ( cnt_hr_prev[2] !== cnt_hr_expected_prev[2] )
		&& ((cnt_hr_expected_prev[2] !== last_cnt_hr_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt_hr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_hr_expected_prev);
		$display ("     Real value = %b", cnt_hr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cnt_hr_exp[2] = cnt_hr_expected_prev[2];
	end
	if (
		( cnt_hr_expected_prev[3] !== 1'bx ) && ( cnt_hr_prev[3] !== cnt_hr_expected_prev[3] )
		&& ((cnt_hr_expected_prev[3] !== last_cnt_hr_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt_hr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_hr_expected_prev);
		$display ("     Real value = %b", cnt_hr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cnt_hr_exp[3] = cnt_hr_expected_prev[3];
	end
	if (
		( cnt_hr_expected_prev[4] !== 1'bx ) && ( cnt_hr_prev[4] !== cnt_hr_expected_prev[4] )
		&& ((cnt_hr_expected_prev[4] !== last_cnt_hr_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt_hr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_hr_expected_prev);
		$display ("     Real value = %b", cnt_hr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cnt_hr_exp[4] = cnt_hr_expected_prev[4];
	end
	if (
		( cnt_hr_expected_prev[5] !== 1'bx ) && ( cnt_hr_prev[5] !== cnt_hr_expected_prev[5] )
		&& ((cnt_hr_expected_prev[5] !== last_cnt_hr_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt_hr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_hr_expected_prev);
		$display ("     Real value = %b", cnt_hr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cnt_hr_exp[5] = cnt_hr_expected_prev[5];
	end
	if (
		( cnt_hr_expected_prev[6] !== 1'bx ) && ( cnt_hr_prev[6] !== cnt_hr_expected_prev[6] )
		&& ((cnt_hr_expected_prev[6] !== last_cnt_hr_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt_hr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_hr_expected_prev);
		$display ("     Real value = %b", cnt_hr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cnt_hr_exp[6] = cnt_hr_expected_prev[6];
	end
	if (
		( cnt_hr_expected_prev[7] !== 1'bx ) && ( cnt_hr_prev[7] !== cnt_hr_expected_prev[7] )
		&& ((cnt_hr_expected_prev[7] !== last_cnt_hr_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt_hr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_hr_expected_prev);
		$display ("     Real value = %b", cnt_hr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_cnt_hr_exp[7] = cnt_hr_expected_prev[7];
	end
	if (
		( cnt_min_expected_prev[0] !== 1'bx ) && ( cnt_min_prev[0] !== cnt_min_expected_prev[0] )
		&& ((cnt_min_expected_prev[0] !== last_cnt_min_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt_min[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_min_expected_prev);
		$display ("     Real value = %b", cnt_min_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_cnt_min_exp[0] = cnt_min_expected_prev[0];
	end
	if (
		( cnt_min_expected_prev[1] !== 1'bx ) && ( cnt_min_prev[1] !== cnt_min_expected_prev[1] )
		&& ((cnt_min_expected_prev[1] !== last_cnt_min_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt_min[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_min_expected_prev);
		$display ("     Real value = %b", cnt_min_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_cnt_min_exp[1] = cnt_min_expected_prev[1];
	end
	if (
		( cnt_min_expected_prev[2] !== 1'bx ) && ( cnt_min_prev[2] !== cnt_min_expected_prev[2] )
		&& ((cnt_min_expected_prev[2] !== last_cnt_min_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt_min[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_min_expected_prev);
		$display ("     Real value = %b", cnt_min_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_cnt_min_exp[2] = cnt_min_expected_prev[2];
	end
	if (
		( cnt_min_expected_prev[3] !== 1'bx ) && ( cnt_min_prev[3] !== cnt_min_expected_prev[3] )
		&& ((cnt_min_expected_prev[3] !== last_cnt_min_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt_min[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_min_expected_prev);
		$display ("     Real value = %b", cnt_min_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_cnt_min_exp[3] = cnt_min_expected_prev[3];
	end
	if (
		( cnt_min_expected_prev[4] !== 1'bx ) && ( cnt_min_prev[4] !== cnt_min_expected_prev[4] )
		&& ((cnt_min_expected_prev[4] !== last_cnt_min_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt_min[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_min_expected_prev);
		$display ("     Real value = %b", cnt_min_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_cnt_min_exp[4] = cnt_min_expected_prev[4];
	end
	if (
		( cnt_min_expected_prev[5] !== 1'bx ) && ( cnt_min_prev[5] !== cnt_min_expected_prev[5] )
		&& ((cnt_min_expected_prev[5] !== last_cnt_min_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt_min[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_min_expected_prev);
		$display ("     Real value = %b", cnt_min_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_cnt_min_exp[5] = cnt_min_expected_prev[5];
	end
	if (
		( cnt_min_expected_prev[6] !== 1'bx ) && ( cnt_min_prev[6] !== cnt_min_expected_prev[6] )
		&& ((cnt_min_expected_prev[6] !== last_cnt_min_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt_min[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_min_expected_prev);
		$display ("     Real value = %b", cnt_min_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_cnt_min_exp[6] = cnt_min_expected_prev[6];
	end
	if (
		( cnt_min_expected_prev[7] !== 1'bx ) && ( cnt_min_prev[7] !== cnt_min_expected_prev[7] )
		&& ((cnt_min_expected_prev[7] !== last_cnt_min_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt_min[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_min_expected_prev);
		$display ("     Real value = %b", cnt_min_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_cnt_min_exp[7] = cnt_min_expected_prev[7];
	end
	if (
		( cnt_sec_expected_prev[0] !== 1'bx ) && ( cnt_sec_prev[0] !== cnt_sec_expected_prev[0] )
		&& ((cnt_sec_expected_prev[0] !== last_cnt_sec_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt_sec[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_sec_expected_prev);
		$display ("     Real value = %b", cnt_sec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_cnt_sec_exp[0] = cnt_sec_expected_prev[0];
	end
	if (
		( cnt_sec_expected_prev[1] !== 1'bx ) && ( cnt_sec_prev[1] !== cnt_sec_expected_prev[1] )
		&& ((cnt_sec_expected_prev[1] !== last_cnt_sec_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt_sec[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_sec_expected_prev);
		$display ("     Real value = %b", cnt_sec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_cnt_sec_exp[1] = cnt_sec_expected_prev[1];
	end
	if (
		( cnt_sec_expected_prev[2] !== 1'bx ) && ( cnt_sec_prev[2] !== cnt_sec_expected_prev[2] )
		&& ((cnt_sec_expected_prev[2] !== last_cnt_sec_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt_sec[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_sec_expected_prev);
		$display ("     Real value = %b", cnt_sec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_cnt_sec_exp[2] = cnt_sec_expected_prev[2];
	end
	if (
		( cnt_sec_expected_prev[3] !== 1'bx ) && ( cnt_sec_prev[3] !== cnt_sec_expected_prev[3] )
		&& ((cnt_sec_expected_prev[3] !== last_cnt_sec_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt_sec[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_sec_expected_prev);
		$display ("     Real value = %b", cnt_sec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_cnt_sec_exp[3] = cnt_sec_expected_prev[3];
	end
	if (
		( cnt_sec_expected_prev[4] !== 1'bx ) && ( cnt_sec_prev[4] !== cnt_sec_expected_prev[4] )
		&& ((cnt_sec_expected_prev[4] !== last_cnt_sec_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt_sec[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_sec_expected_prev);
		$display ("     Real value = %b", cnt_sec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_cnt_sec_exp[4] = cnt_sec_expected_prev[4];
	end
	if (
		( cnt_sec_expected_prev[5] !== 1'bx ) && ( cnt_sec_prev[5] !== cnt_sec_expected_prev[5] )
		&& ((cnt_sec_expected_prev[5] !== last_cnt_sec_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt_sec[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_sec_expected_prev);
		$display ("     Real value = %b", cnt_sec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_cnt_sec_exp[5] = cnt_sec_expected_prev[5];
	end
	if (
		( cnt_sec_expected_prev[6] !== 1'bx ) && ( cnt_sec_prev[6] !== cnt_sec_expected_prev[6] )
		&& ((cnt_sec_expected_prev[6] !== last_cnt_sec_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt_sec[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_sec_expected_prev);
		$display ("     Real value = %b", cnt_sec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_cnt_sec_exp[6] = cnt_sec_expected_prev[6];
	end
	if (
		( cnt_sec_expected_prev[7] !== 1'bx ) && ( cnt_sec_prev[7] !== cnt_sec_expected_prev[7] )
		&& ((cnt_sec_expected_prev[7] !== last_cnt_sec_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt_sec[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_sec_expected_prev);
		$display ("     Real value = %b", cnt_sec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_cnt_sec_exp[7] = cnt_sec_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#80000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module digitalclock_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ad_hr;
reg ad_min;
reg ad_sec;
reg clk;
reg rst;
// wires                                               
wire [6:0] Hr_g;
wire [6:0] Hr_s;
wire [6:0] Min_g;
wire [6:0] Min_s;
wire [6:0] Sec_g;
wire [6:0] Sec_s;
wire [7:0] cnt_hr;
wire [7:0] cnt_min;
wire [7:0] cnt_sec;

wire sampler;                             

// assign statements (if any)                          
digitalclock i1 (
// port map - connection between master ports and signals/registers   
	.Hr_g(Hr_g),
	.Hr_s(Hr_s),
	.Min_g(Min_g),
	.Min_s(Min_s),
	.Sec_g(Sec_g),
	.Sec_s(Sec_s),
	.ad_hr(ad_hr),
	.ad_min(ad_min),
	.ad_sec(ad_sec),
	.clk(clk),
	.cnt_hr(cnt_hr),
	.cnt_min(cnt_min),
	.cnt_sec(cnt_sec),
	.rst(rst)
);

// rst
initial
begin
	rst = 1'b1;
end 

// clk
initial
begin
	repeat(49999)
	begin
		clk = 1'b0;
		clk = #500 1'b1;
		# 500;
	end
	clk = 1'b0;
end 

// ad_hr
initial
begin
	ad_hr = 1'b0;
end 

// ad_min
initial
begin
	ad_min = 1'b0;
end 

// ad_sec
initial
begin
	ad_sec = 1'b0;
end 

digitalclock_vlg_sample_tst tb_sample (
	.ad_hr(ad_hr),
	.ad_min(ad_min),
	.ad_sec(ad_sec),
	.clk(clk),
	.rst(rst),
	.sampler_tx(sampler)
);

digitalclock_vlg_check_tst tb_out(
	.Hr_g(Hr_g),
	.Hr_s(Hr_s),
	.Min_g(Min_g),
	.Min_s(Min_s),
	.Sec_g(Sec_g),
	.Sec_s(Sec_s),
	.cnt_hr(cnt_hr),
	.cnt_min(cnt_min),
	.cnt_sec(cnt_sec),
	.sampler_rx(sampler)
);
endmodule

