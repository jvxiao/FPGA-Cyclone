// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/30/2018 12:05:06"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    traffic
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module traffic_vlg_sample_tst(
	clk,
	rst_n,
	s,
	sampler_tx
);
input  clk;
input  rst_n;
input  s;
output sampler_tx;

reg sample;
time current_time;
always @(clk or rst_n or s)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module traffic_vlg_check_tst (
	CG,
	CR,
	CY,
	MG,
	MR,
	MY,
	SG0,
	SG1,
	SG4,
	SG5,
	sec_cnt,
	state,
	sampler_rx
);
input  CG;
input  CR;
input  CY;
input  MG;
input  MR;
input  MY;
input [6:0] SG0;
input [6:0] SG1;
input [6:0] SG4;
input [6:0] SG5;
input [7:0] sec_cnt;
input [2:0] state;
input sampler_rx;

reg  CG_expected;
reg  CR_expected;
reg  CY_expected;
reg  MG_expected;
reg  MR_expected;
reg  MY_expected;
reg [6:0] SG0_expected;
reg [6:0] SG1_expected;
reg [6:0] SG4_expected;
reg [6:0] SG5_expected;
reg [7:0] sec_cnt_expected;
reg [2:0] state_expected;

reg  CG_prev;
reg  CR_prev;
reg  CY_prev;
reg  MG_prev;
reg  MR_prev;
reg  MY_prev;
reg [6:0] SG0_prev;
reg [6:0] SG1_prev;
reg [6:0] SG4_prev;
reg [6:0] SG5_prev;
reg [7:0] sec_cnt_prev;
reg [2:0] state_prev;

reg  CG_expected_prev;
reg  CR_expected_prev;
reg  CY_expected_prev;
reg  MG_expected_prev;
reg  MR_expected_prev;
reg  MY_expected_prev;
reg [7:0] sec_cnt_expected_prev;
reg [2:0] state_expected_prev;

reg  last_CG_exp;
reg  last_CR_exp;
reg  last_CY_exp;
reg  last_MG_exp;
reg  last_MR_exp;
reg  last_MY_exp;
reg [7:0] last_sec_cnt_exp;
reg [2:0] last_state_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:12] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 12'b1;
end

// update real /o prevs

always @(trigger)
begin
	CG_prev = CG;
	CR_prev = CR;
	CY_prev = CY;
	MG_prev = MG;
	MR_prev = MR;
	MY_prev = MY;
	SG0_prev = SG0;
	SG1_prev = SG1;
	SG4_prev = SG4;
	SG5_prev = SG5;
	sec_cnt_prev = sec_cnt;
	state_prev = state;
end

// update expected /o prevs

always @(trigger)
begin
	CG_expected_prev = CG_expected;
	CR_expected_prev = CR_expected;
	CY_expected_prev = CY_expected;
	MG_expected_prev = MG_expected;
	MR_expected_prev = MR_expected;
	MY_expected_prev = MY_expected;
	sec_cnt_expected_prev = sec_cnt_expected;
	state_expected_prev = state_expected;
end



// expected CG
initial
begin
	CG_expected = 1'bX;
	CG_expected = #999000 1'b0;
end 

// expected CR
initial
begin
	CR_expected = 1'bX;
	CR_expected = #999000 1'b0;
end 

// expected CY
initial
begin
	CY_expected = 1'bX;
	CY_expected = #999000 1'b0;
end 

// expected MG
initial
begin
	MG_expected = 1'bX;
	MG_expected = #999000 1'b0;
end 

// expected MR
initial
begin
	MR_expected = 1'bX;
	MR_expected = #999000 1'b0;
end 

// expected MY
initial
begin
	MY_expected = 1'bX;
	MY_expected = #999000 1'b0;
end 
// expected state[ 2 ]
initial
begin
	state_expected[2] = 1'bX;
	state_expected[2] = #30000 1'b1;
	state_expected[2] = #20000 1'bX;
	state_expected[2] = #949000 1'b0;
end 
// expected state[ 1 ]
initial
begin
	state_expected[1] = 1'bX;
	state_expected[1] = #30000 1'b1;
	state_expected[1] = #20000 1'bX;
	state_expected[1] = #949000 1'b0;
end 
// expected state[ 0 ]
initial
begin
	state_expected[0] = 1'bX;
	state_expected[0] = #30000 1'b1;
	state_expected[0] = #20000 1'bX;
	state_expected[0] = #949000 1'b0;
end 
// expected sec_cnt[ 7 ]
initial
begin
	sec_cnt_expected[7] = 1'bX;
end 
// expected sec_cnt[ 6 ]
initial
begin
	sec_cnt_expected[6] = 1'bX;
end 
// expected sec_cnt[ 5 ]
initial
begin
	sec_cnt_expected[5] = 1'bX;
end 
// expected sec_cnt[ 4 ]
initial
begin
	sec_cnt_expected[4] = 1'bX;
end 
// expected sec_cnt[ 3 ]
initial
begin
	sec_cnt_expected[3] = 1'bX;
end 
// expected sec_cnt[ 2 ]
initial
begin
	sec_cnt_expected[2] = 1'bX;
end 
// expected sec_cnt[ 1 ]
initial
begin
	sec_cnt_expected[1] = 1'bX;
end 
// expected sec_cnt[ 0 ]
initial
begin
	sec_cnt_expected[0] = 1'bX;
end 
// generate trigger
always @(CG_expected or CG or CR_expected or CR or CY_expected or CY or MG_expected or MG or MR_expected or MR or MY_expected or MY or SG0_expected or SG0 or SG1_expected or SG1 or SG4_expected or SG4 or SG5_expected or SG5 or sec_cnt_expected or sec_cnt or state_expected or state)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CG = %b | expected CR = %b | expected CY = %b | expected MG = %b | expected MR = %b | expected MY = %b | expected SG0 = %b | expected SG1 = %b | expected SG4 = %b | expected SG5 = %b | expected sec_cnt = %b | expected state = %b | ",CG_expected_prev,CR_expected_prev,CY_expected_prev,MG_expected_prev,MR_expected_prev,MY_expected_prev,SG0_expected_prev,SG1_expected_prev,SG4_expected_prev,SG5_expected_prev,sec_cnt_expected_prev,state_expected_prev);
	$display("| real CG = %b | real CR = %b | real CY = %b | real MG = %b | real MR = %b | real MY = %b | real SG0 = %b | real SG1 = %b | real SG4 = %b | real SG5 = %b | real sec_cnt = %b | real state = %b | ",CG_prev,CR_prev,CY_prev,MG_prev,MR_prev,MY_prev,SG0_prev,SG1_prev,SG4_prev,SG5_prev,sec_cnt_prev,state_prev);
`endif
	if (
		( CG_expected_prev !== 1'bx ) && ( CG_prev !== CG_expected_prev )
		&& ((CG_expected_prev !== last_CG_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CG :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CG_expected_prev);
		$display ("     Real value = %b", CG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CG_exp = CG_expected_prev;
	end
	if (
		( CR_expected_prev !== 1'bx ) && ( CR_prev !== CR_expected_prev )
		&& ((CR_expected_prev !== last_CR_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CR_expected_prev);
		$display ("     Real value = %b", CR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CR_exp = CR_expected_prev;
	end
	if (
		( CY_expected_prev !== 1'bx ) && ( CY_prev !== CY_expected_prev )
		&& ((CY_expected_prev !== last_CY_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CY :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CY_expected_prev);
		$display ("     Real value = %b", CY_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CY_exp = CY_expected_prev;
	end
	if (
		( MG_expected_prev !== 1'bx ) && ( MG_prev !== MG_expected_prev )
		&& ((MG_expected_prev !== last_MG_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MG :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MG_expected_prev);
		$display ("     Real value = %b", MG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MG_exp = MG_expected_prev;
	end
	if (
		( MR_expected_prev !== 1'bx ) && ( MR_prev !== MR_expected_prev )
		&& ((MR_expected_prev !== last_MR_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MR_expected_prev);
		$display ("     Real value = %b", MR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MR_exp = MR_expected_prev;
	end
	if (
		( MY_expected_prev !== 1'bx ) && ( MY_prev !== MY_expected_prev )
		&& ((MY_expected_prev !== last_MY_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MY :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MY_expected_prev);
		$display ("     Real value = %b", MY_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MY_exp = MY_expected_prev;
	end
	if (
		( sec_cnt_expected_prev[0] !== 1'bx ) && ( sec_cnt_prev[0] !== sec_cnt_expected_prev[0] )
		&& ((sec_cnt_expected_prev[0] !== last_sec_cnt_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sec_cnt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sec_cnt_expected_prev);
		$display ("     Real value = %b", sec_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_sec_cnt_exp[0] = sec_cnt_expected_prev[0];
	end
	if (
		( sec_cnt_expected_prev[1] !== 1'bx ) && ( sec_cnt_prev[1] !== sec_cnt_expected_prev[1] )
		&& ((sec_cnt_expected_prev[1] !== last_sec_cnt_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sec_cnt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sec_cnt_expected_prev);
		$display ("     Real value = %b", sec_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_sec_cnt_exp[1] = sec_cnt_expected_prev[1];
	end
	if (
		( sec_cnt_expected_prev[2] !== 1'bx ) && ( sec_cnt_prev[2] !== sec_cnt_expected_prev[2] )
		&& ((sec_cnt_expected_prev[2] !== last_sec_cnt_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sec_cnt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sec_cnt_expected_prev);
		$display ("     Real value = %b", sec_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_sec_cnt_exp[2] = sec_cnt_expected_prev[2];
	end
	if (
		( sec_cnt_expected_prev[3] !== 1'bx ) && ( sec_cnt_prev[3] !== sec_cnt_expected_prev[3] )
		&& ((sec_cnt_expected_prev[3] !== last_sec_cnt_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sec_cnt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sec_cnt_expected_prev);
		$display ("     Real value = %b", sec_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_sec_cnt_exp[3] = sec_cnt_expected_prev[3];
	end
	if (
		( sec_cnt_expected_prev[4] !== 1'bx ) && ( sec_cnt_prev[4] !== sec_cnt_expected_prev[4] )
		&& ((sec_cnt_expected_prev[4] !== last_sec_cnt_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sec_cnt[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sec_cnt_expected_prev);
		$display ("     Real value = %b", sec_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_sec_cnt_exp[4] = sec_cnt_expected_prev[4];
	end
	if (
		( sec_cnt_expected_prev[5] !== 1'bx ) && ( sec_cnt_prev[5] !== sec_cnt_expected_prev[5] )
		&& ((sec_cnt_expected_prev[5] !== last_sec_cnt_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sec_cnt[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sec_cnt_expected_prev);
		$display ("     Real value = %b", sec_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_sec_cnt_exp[5] = sec_cnt_expected_prev[5];
	end
	if (
		( sec_cnt_expected_prev[6] !== 1'bx ) && ( sec_cnt_prev[6] !== sec_cnt_expected_prev[6] )
		&& ((sec_cnt_expected_prev[6] !== last_sec_cnt_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sec_cnt[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sec_cnt_expected_prev);
		$display ("     Real value = %b", sec_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_sec_cnt_exp[6] = sec_cnt_expected_prev[6];
	end
	if (
		( sec_cnt_expected_prev[7] !== 1'bx ) && ( sec_cnt_prev[7] !== sec_cnt_expected_prev[7] )
		&& ((sec_cnt_expected_prev[7] !== last_sec_cnt_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sec_cnt[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sec_cnt_expected_prev);
		$display ("     Real value = %b", sec_cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_sec_cnt_exp[7] = sec_cnt_expected_prev[7];
	end
	if (
		( state_expected_prev[0] !== 1'bx ) && ( state_prev[0] !== state_expected_prev[0] )
		&& ((state_expected_prev[0] !== last_state_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_state_exp[0] = state_expected_prev[0];
	end
	if (
		( state_expected_prev[1] !== 1'bx ) && ( state_prev[1] !== state_expected_prev[1] )
		&& ((state_expected_prev[1] !== last_state_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_state_exp[1] = state_expected_prev[1];
	end
	if (
		( state_expected_prev[2] !== 1'bx ) && ( state_prev[2] !== state_expected_prev[2] )
		&& ((state_expected_prev[2] !== last_state_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_state_exp[2] = state_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#20000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module traffic_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg rst_n;
reg s;
// wires                                               
wire CG;
wire CR;
wire CY;
wire MG;
wire MR;
wire MY;
wire [6:0] SG0;
wire [6:0] SG1;
wire [6:0] SG4;
wire [6:0] SG5;
wire [7:0] sec_cnt;
wire [2:0] state;

wire sampler;                             

// assign statements (if any)                          
traffic i1 (
// port map - connection between master ports and signals/registers   
	.CG(CG),
	.CR(CR),
	.CY(CY),
	.MG(MG),
	.MR(MR),
	.MY(MY),
	.SG0(SG0),
	.SG1(SG1),
	.SG4(SG4),
	.SG5(SG5),
	.clk(clk),
	.rst_n(rst_n),
	.s(s),
	.sec_cnt(sec_cnt),
	.state(state)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// rst_n
initial
begin
	rst_n = 1'b1;
	rst_n = #1180000 1'b0;
	rst_n = #60000 1'b1;
end 

// s
initial
begin
	s = 1'b1;
	s = #2560000 1'b0;
	s = #1200000 1'b1;
end 

traffic_vlg_sample_tst tb_sample (
	.clk(clk),
	.rst_n(rst_n),
	.s(s),
	.sampler_tx(sampler)
);

traffic_vlg_check_tst tb_out(
	.CG(CG),
	.CR(CR),
	.CY(CY),
	.MG(MG),
	.MR(MR),
	.MY(MY),
	.SG0(SG0),
	.SG1(SG1),
	.SG4(SG4),
	.SG5(SG5),
	.sec_cnt(sec_cnt),
	.state(state),
	.sampler_rx(sampler)
);
endmodule

