// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/14/2018 11:09:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    top_clock
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module top_clock_vlg_sample_tst(
	clk,
	key3,
	key_b,
	key_in,
	sampler_tx
);
input  clk;
input  key3;
input [1:0] key_b;
input [3:0] key_in;
output sampler_tx;

reg sample;
time current_time;
always @(clk or key3 or key_b or key_in)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module top_clock_vlg_check_tst (
	SG0,
	SG1,
	SG2,
	SG3,
	SG4,
	SG5,
	led,
	sampler_rx
);
input [6:0] SG0;
input [6:0] SG1;
input [6:0] SG2;
input [6:0] SG3;
input [6:0] SG4;
input [6:0] SG5;
input  led;
input sampler_rx;

reg [6:0] SG0_expected;
reg [6:0] SG1_expected;
reg [6:0] SG2_expected;
reg [6:0] SG3_expected;
reg [6:0] SG4_expected;
reg [6:0] SG5_expected;
reg  led_expected;

reg [6:0] SG0_prev;
reg [6:0] SG1_prev;
reg [6:0] SG2_prev;
reg [6:0] SG3_prev;
reg [6:0] SG4_prev;
reg [6:0] SG5_prev;
reg  led_prev;

reg [6:0] SG0_expected_prev;
reg [6:0] SG1_expected_prev;
reg [6:0] SG2_expected_prev;
reg [6:0] SG3_expected_prev;
reg [6:0] SG4_expected_prev;
reg [6:0] SG5_expected_prev;
reg  led_expected_prev;

reg [6:0] last_SG0_exp;
reg [6:0] last_SG1_exp;
reg [6:0] last_SG2_exp;
reg [6:0] last_SG3_exp;
reg [6:0] last_SG4_exp;
reg [6:0] last_SG5_exp;
reg  last_led_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	SG0_prev = SG0;
	SG1_prev = SG1;
	SG2_prev = SG2;
	SG3_prev = SG3;
	SG4_prev = SG4;
	SG5_prev = SG5;
	led_prev = led;
end

// update expected /o prevs

always @(trigger)
begin
	SG0_expected_prev = SG0_expected;
	SG1_expected_prev = SG1_expected;
	SG2_expected_prev = SG2_expected;
	SG3_expected_prev = SG3_expected;
	SG4_expected_prev = SG4_expected;
	SG5_expected_prev = SG5_expected;
	led_expected_prev = led_expected;
end


// expected SG0[ 6 ]
initial
begin
	SG0_expected[6] = 1'bX;
	SG0_expected[6] = #999000 1'b0;
end 
// expected SG0[ 5 ]
initial
begin
	SG0_expected[5] = 1'bX;
	SG0_expected[5] = #999000 1'b0;
end 
// expected SG0[ 4 ]
initial
begin
	SG0_expected[4] = 1'bX;
	SG0_expected[4] = #999000 1'b0;
end 
// expected SG0[ 3 ]
initial
begin
	SG0_expected[3] = 1'bX;
	SG0_expected[3] = #999000 1'b0;
end 
// expected SG0[ 2 ]
initial
begin
	SG0_expected[2] = 1'bX;
	SG0_expected[2] = #999000 1'b0;
end 
// expected SG0[ 1 ]
initial
begin
	SG0_expected[1] = 1'bX;
	SG0_expected[1] = #999000 1'b0;
end 
// expected SG0[ 0 ]
initial
begin
	SG0_expected[0] = 1'bX;
	SG0_expected[0] = #999000 1'b0;
end 
// expected SG1[ 6 ]
initial
begin
	SG1_expected[6] = 1'bX;
	SG1_expected[6] = #999000 1'b0;
end 
// expected SG1[ 5 ]
initial
begin
	SG1_expected[5] = 1'bX;
	SG1_expected[5] = #999000 1'b0;
end 
// expected SG1[ 4 ]
initial
begin
	SG1_expected[4] = 1'bX;
	SG1_expected[4] = #999000 1'b0;
end 
// expected SG1[ 3 ]
initial
begin
	SG1_expected[3] = 1'bX;
	SG1_expected[3] = #999000 1'b0;
end 
// expected SG1[ 2 ]
initial
begin
	SG1_expected[2] = 1'bX;
	SG1_expected[2] = #999000 1'b0;
end 
// expected SG1[ 1 ]
initial
begin
	SG1_expected[1] = 1'bX;
	SG1_expected[1] = #999000 1'b0;
end 
// expected SG1[ 0 ]
initial
begin
	SG1_expected[0] = 1'bX;
	SG1_expected[0] = #999000 1'b0;
end 
// expected SG2[ 6 ]
initial
begin
	SG2_expected[6] = 1'bX;
	SG2_expected[6] = #999000 1'b0;
end 
// expected SG2[ 5 ]
initial
begin
	SG2_expected[5] = 1'bX;
	SG2_expected[5] = #999000 1'b0;
end 
// expected SG2[ 4 ]
initial
begin
	SG2_expected[4] = 1'bX;
	SG2_expected[4] = #999000 1'b0;
end 
// expected SG2[ 3 ]
initial
begin
	SG2_expected[3] = 1'bX;
	SG2_expected[3] = #999000 1'b0;
end 
// expected SG2[ 2 ]
initial
begin
	SG2_expected[2] = 1'bX;
	SG2_expected[2] = #999000 1'b0;
end 
// expected SG2[ 1 ]
initial
begin
	SG2_expected[1] = 1'bX;
	SG2_expected[1] = #999000 1'b0;
end 
// expected SG2[ 0 ]
initial
begin
	SG2_expected[0] = 1'bX;
	SG2_expected[0] = #999000 1'b0;
end 
// expected SG3[ 6 ]
initial
begin
	SG3_expected[6] = 1'bX;
	SG3_expected[6] = #999000 1'b0;
end 
// expected SG3[ 5 ]
initial
begin
	SG3_expected[5] = 1'bX;
	SG3_expected[5] = #999000 1'b0;
end 
// expected SG3[ 4 ]
initial
begin
	SG3_expected[4] = 1'bX;
	SG3_expected[4] = #999000 1'b0;
end 
// expected SG3[ 3 ]
initial
begin
	SG3_expected[3] = 1'bX;
	SG3_expected[3] = #999000 1'b0;
end 
// expected SG3[ 2 ]
initial
begin
	SG3_expected[2] = 1'bX;
	SG3_expected[2] = #999000 1'b0;
end 
// expected SG3[ 1 ]
initial
begin
	SG3_expected[1] = 1'bX;
	SG3_expected[1] = #999000 1'b0;
end 
// expected SG3[ 0 ]
initial
begin
	SG3_expected[0] = 1'bX;
	SG3_expected[0] = #999000 1'b0;
end 
// expected SG4[ 6 ]
initial
begin
	SG4_expected[6] = 1'bX;
	SG4_expected[6] = #999000 1'b0;
end 
// expected SG4[ 5 ]
initial
begin
	SG4_expected[5] = 1'bX;
	SG4_expected[5] = #999000 1'b0;
end 
// expected SG4[ 4 ]
initial
begin
	SG4_expected[4] = 1'bX;
	SG4_expected[4] = #999000 1'b0;
end 
// expected SG4[ 3 ]
initial
begin
	SG4_expected[3] = 1'bX;
	SG4_expected[3] = #999000 1'b0;
end 
// expected SG4[ 2 ]
initial
begin
	SG4_expected[2] = 1'bX;
	SG4_expected[2] = #999000 1'b0;
end 
// expected SG4[ 1 ]
initial
begin
	SG4_expected[1] = 1'bX;
	SG4_expected[1] = #999000 1'b0;
end 
// expected SG4[ 0 ]
initial
begin
	SG4_expected[0] = 1'bX;
	SG4_expected[0] = #999000 1'b0;
end 
// expected SG5[ 6 ]
initial
begin
	SG5_expected[6] = 1'bX;
	SG5_expected[6] = #999000 1'b0;
end 
// expected SG5[ 5 ]
initial
begin
	SG5_expected[5] = 1'bX;
	SG5_expected[5] = #999000 1'b0;
end 
// expected SG5[ 4 ]
initial
begin
	SG5_expected[4] = 1'bX;
	SG5_expected[4] = #999000 1'b0;
end 
// expected SG5[ 3 ]
initial
begin
	SG5_expected[3] = 1'bX;
	SG5_expected[3] = #999000 1'b0;
end 
// expected SG5[ 2 ]
initial
begin
	SG5_expected[2] = 1'bX;
	SG5_expected[2] = #999000 1'b0;
end 
// expected SG5[ 1 ]
initial
begin
	SG5_expected[1] = 1'bX;
	SG5_expected[1] = #999000 1'b0;
end 
// expected SG5[ 0 ]
initial
begin
	SG5_expected[0] = 1'bX;
	SG5_expected[0] = #999000 1'b0;
end 

// expected led
initial
begin
	led_expected = 1'bX;
	led_expected = #999000 1'b0;
end 
// generate trigger
always @(SG0_expected or SG0 or SG1_expected or SG1 or SG2_expected or SG2 or SG3_expected or SG3 or SG4_expected or SG4 or SG5_expected or SG5 or led_expected or led)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected SG0 = %b | expected SG1 = %b | expected SG2 = %b | expected SG3 = %b | expected SG4 = %b | expected SG5 = %b | expected led = %b | ",SG0_expected_prev,SG1_expected_prev,SG2_expected_prev,SG3_expected_prev,SG4_expected_prev,SG5_expected_prev,led_expected_prev);
	$display("| real SG0 = %b | real SG1 = %b | real SG2 = %b | real SG3 = %b | real SG4 = %b | real SG5 = %b | real led = %b | ",SG0_prev,SG1_prev,SG2_prev,SG3_prev,SG4_prev,SG5_prev,led_prev);
`endif
	if (
		( SG0_expected_prev[0] !== 1'bx ) && ( SG0_prev[0] !== SG0_expected_prev[0] )
		&& ((SG0_expected_prev[0] !== last_SG0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG0_expected_prev);
		$display ("     Real value = %b", SG0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SG0_exp[0] = SG0_expected_prev[0];
	end
	if (
		( SG0_expected_prev[1] !== 1'bx ) && ( SG0_prev[1] !== SG0_expected_prev[1] )
		&& ((SG0_expected_prev[1] !== last_SG0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG0_expected_prev);
		$display ("     Real value = %b", SG0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SG0_exp[1] = SG0_expected_prev[1];
	end
	if (
		( SG0_expected_prev[2] !== 1'bx ) && ( SG0_prev[2] !== SG0_expected_prev[2] )
		&& ((SG0_expected_prev[2] !== last_SG0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG0_expected_prev);
		$display ("     Real value = %b", SG0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SG0_exp[2] = SG0_expected_prev[2];
	end
	if (
		( SG0_expected_prev[3] !== 1'bx ) && ( SG0_prev[3] !== SG0_expected_prev[3] )
		&& ((SG0_expected_prev[3] !== last_SG0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG0_expected_prev);
		$display ("     Real value = %b", SG0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SG0_exp[3] = SG0_expected_prev[3];
	end
	if (
		( SG0_expected_prev[4] !== 1'bx ) && ( SG0_prev[4] !== SG0_expected_prev[4] )
		&& ((SG0_expected_prev[4] !== last_SG0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG0_expected_prev);
		$display ("     Real value = %b", SG0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SG0_exp[4] = SG0_expected_prev[4];
	end
	if (
		( SG0_expected_prev[5] !== 1'bx ) && ( SG0_prev[5] !== SG0_expected_prev[5] )
		&& ((SG0_expected_prev[5] !== last_SG0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG0_expected_prev);
		$display ("     Real value = %b", SG0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SG0_exp[5] = SG0_expected_prev[5];
	end
	if (
		( SG0_expected_prev[6] !== 1'bx ) && ( SG0_prev[6] !== SG0_expected_prev[6] )
		&& ((SG0_expected_prev[6] !== last_SG0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG0_expected_prev);
		$display ("     Real value = %b", SG0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SG0_exp[6] = SG0_expected_prev[6];
	end
	if (
		( SG1_expected_prev[0] !== 1'bx ) && ( SG1_prev[0] !== SG1_expected_prev[0] )
		&& ((SG1_expected_prev[0] !== last_SG1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG1_expected_prev);
		$display ("     Real value = %b", SG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SG1_exp[0] = SG1_expected_prev[0];
	end
	if (
		( SG1_expected_prev[1] !== 1'bx ) && ( SG1_prev[1] !== SG1_expected_prev[1] )
		&& ((SG1_expected_prev[1] !== last_SG1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG1_expected_prev);
		$display ("     Real value = %b", SG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SG1_exp[1] = SG1_expected_prev[1];
	end
	if (
		( SG1_expected_prev[2] !== 1'bx ) && ( SG1_prev[2] !== SG1_expected_prev[2] )
		&& ((SG1_expected_prev[2] !== last_SG1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG1_expected_prev);
		$display ("     Real value = %b", SG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SG1_exp[2] = SG1_expected_prev[2];
	end
	if (
		( SG1_expected_prev[3] !== 1'bx ) && ( SG1_prev[3] !== SG1_expected_prev[3] )
		&& ((SG1_expected_prev[3] !== last_SG1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG1_expected_prev);
		$display ("     Real value = %b", SG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SG1_exp[3] = SG1_expected_prev[3];
	end
	if (
		( SG1_expected_prev[4] !== 1'bx ) && ( SG1_prev[4] !== SG1_expected_prev[4] )
		&& ((SG1_expected_prev[4] !== last_SG1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG1_expected_prev);
		$display ("     Real value = %b", SG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SG1_exp[4] = SG1_expected_prev[4];
	end
	if (
		( SG1_expected_prev[5] !== 1'bx ) && ( SG1_prev[5] !== SG1_expected_prev[5] )
		&& ((SG1_expected_prev[5] !== last_SG1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG1_expected_prev);
		$display ("     Real value = %b", SG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SG1_exp[5] = SG1_expected_prev[5];
	end
	if (
		( SG1_expected_prev[6] !== 1'bx ) && ( SG1_prev[6] !== SG1_expected_prev[6] )
		&& ((SG1_expected_prev[6] !== last_SG1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG1_expected_prev);
		$display ("     Real value = %b", SG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SG1_exp[6] = SG1_expected_prev[6];
	end
	if (
		( SG2_expected_prev[0] !== 1'bx ) && ( SG2_prev[0] !== SG2_expected_prev[0] )
		&& ((SG2_expected_prev[0] !== last_SG2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG2_expected_prev);
		$display ("     Real value = %b", SG2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SG2_exp[0] = SG2_expected_prev[0];
	end
	if (
		( SG2_expected_prev[1] !== 1'bx ) && ( SG2_prev[1] !== SG2_expected_prev[1] )
		&& ((SG2_expected_prev[1] !== last_SG2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG2_expected_prev);
		$display ("     Real value = %b", SG2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SG2_exp[1] = SG2_expected_prev[1];
	end
	if (
		( SG2_expected_prev[2] !== 1'bx ) && ( SG2_prev[2] !== SG2_expected_prev[2] )
		&& ((SG2_expected_prev[2] !== last_SG2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG2_expected_prev);
		$display ("     Real value = %b", SG2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SG2_exp[2] = SG2_expected_prev[2];
	end
	if (
		( SG2_expected_prev[3] !== 1'bx ) && ( SG2_prev[3] !== SG2_expected_prev[3] )
		&& ((SG2_expected_prev[3] !== last_SG2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG2_expected_prev);
		$display ("     Real value = %b", SG2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SG2_exp[3] = SG2_expected_prev[3];
	end
	if (
		( SG2_expected_prev[4] !== 1'bx ) && ( SG2_prev[4] !== SG2_expected_prev[4] )
		&& ((SG2_expected_prev[4] !== last_SG2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG2_expected_prev);
		$display ("     Real value = %b", SG2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SG2_exp[4] = SG2_expected_prev[4];
	end
	if (
		( SG2_expected_prev[5] !== 1'bx ) && ( SG2_prev[5] !== SG2_expected_prev[5] )
		&& ((SG2_expected_prev[5] !== last_SG2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG2_expected_prev);
		$display ("     Real value = %b", SG2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SG2_exp[5] = SG2_expected_prev[5];
	end
	if (
		( SG2_expected_prev[6] !== 1'bx ) && ( SG2_prev[6] !== SG2_expected_prev[6] )
		&& ((SG2_expected_prev[6] !== last_SG2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG2_expected_prev);
		$display ("     Real value = %b", SG2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_SG2_exp[6] = SG2_expected_prev[6];
	end
	if (
		( SG3_expected_prev[0] !== 1'bx ) && ( SG3_prev[0] !== SG3_expected_prev[0] )
		&& ((SG3_expected_prev[0] !== last_SG3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG3_expected_prev);
		$display ("     Real value = %b", SG3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SG3_exp[0] = SG3_expected_prev[0];
	end
	if (
		( SG3_expected_prev[1] !== 1'bx ) && ( SG3_prev[1] !== SG3_expected_prev[1] )
		&& ((SG3_expected_prev[1] !== last_SG3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG3_expected_prev);
		$display ("     Real value = %b", SG3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SG3_exp[1] = SG3_expected_prev[1];
	end
	if (
		( SG3_expected_prev[2] !== 1'bx ) && ( SG3_prev[2] !== SG3_expected_prev[2] )
		&& ((SG3_expected_prev[2] !== last_SG3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG3_expected_prev);
		$display ("     Real value = %b", SG3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SG3_exp[2] = SG3_expected_prev[2];
	end
	if (
		( SG3_expected_prev[3] !== 1'bx ) && ( SG3_prev[3] !== SG3_expected_prev[3] )
		&& ((SG3_expected_prev[3] !== last_SG3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG3_expected_prev);
		$display ("     Real value = %b", SG3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SG3_exp[3] = SG3_expected_prev[3];
	end
	if (
		( SG3_expected_prev[4] !== 1'bx ) && ( SG3_prev[4] !== SG3_expected_prev[4] )
		&& ((SG3_expected_prev[4] !== last_SG3_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG3_expected_prev);
		$display ("     Real value = %b", SG3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SG3_exp[4] = SG3_expected_prev[4];
	end
	if (
		( SG3_expected_prev[5] !== 1'bx ) && ( SG3_prev[5] !== SG3_expected_prev[5] )
		&& ((SG3_expected_prev[5] !== last_SG3_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG3_expected_prev);
		$display ("     Real value = %b", SG3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SG3_exp[5] = SG3_expected_prev[5];
	end
	if (
		( SG3_expected_prev[6] !== 1'bx ) && ( SG3_prev[6] !== SG3_expected_prev[6] )
		&& ((SG3_expected_prev[6] !== last_SG3_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG3_expected_prev);
		$display ("     Real value = %b", SG3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_SG3_exp[6] = SG3_expected_prev[6];
	end
	if (
		( SG4_expected_prev[0] !== 1'bx ) && ( SG4_prev[0] !== SG4_expected_prev[0] )
		&& ((SG4_expected_prev[0] !== last_SG4_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG4_expected_prev);
		$display ("     Real value = %b", SG4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SG4_exp[0] = SG4_expected_prev[0];
	end
	if (
		( SG4_expected_prev[1] !== 1'bx ) && ( SG4_prev[1] !== SG4_expected_prev[1] )
		&& ((SG4_expected_prev[1] !== last_SG4_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG4_expected_prev);
		$display ("     Real value = %b", SG4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SG4_exp[1] = SG4_expected_prev[1];
	end
	if (
		( SG4_expected_prev[2] !== 1'bx ) && ( SG4_prev[2] !== SG4_expected_prev[2] )
		&& ((SG4_expected_prev[2] !== last_SG4_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG4_expected_prev);
		$display ("     Real value = %b", SG4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SG4_exp[2] = SG4_expected_prev[2];
	end
	if (
		( SG4_expected_prev[3] !== 1'bx ) && ( SG4_prev[3] !== SG4_expected_prev[3] )
		&& ((SG4_expected_prev[3] !== last_SG4_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG4_expected_prev);
		$display ("     Real value = %b", SG4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SG4_exp[3] = SG4_expected_prev[3];
	end
	if (
		( SG4_expected_prev[4] !== 1'bx ) && ( SG4_prev[4] !== SG4_expected_prev[4] )
		&& ((SG4_expected_prev[4] !== last_SG4_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG4_expected_prev);
		$display ("     Real value = %b", SG4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SG4_exp[4] = SG4_expected_prev[4];
	end
	if (
		( SG4_expected_prev[5] !== 1'bx ) && ( SG4_prev[5] !== SG4_expected_prev[5] )
		&& ((SG4_expected_prev[5] !== last_SG4_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG4_expected_prev);
		$display ("     Real value = %b", SG4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SG4_exp[5] = SG4_expected_prev[5];
	end
	if (
		( SG4_expected_prev[6] !== 1'bx ) && ( SG4_prev[6] !== SG4_expected_prev[6] )
		&& ((SG4_expected_prev[6] !== last_SG4_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG4_expected_prev);
		$display ("     Real value = %b", SG4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SG4_exp[6] = SG4_expected_prev[6];
	end
	if (
		( SG5_expected_prev[0] !== 1'bx ) && ( SG5_prev[0] !== SG5_expected_prev[0] )
		&& ((SG5_expected_prev[0] !== last_SG5_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG5_expected_prev);
		$display ("     Real value = %b", SG5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SG5_exp[0] = SG5_expected_prev[0];
	end
	if (
		( SG5_expected_prev[1] !== 1'bx ) && ( SG5_prev[1] !== SG5_expected_prev[1] )
		&& ((SG5_expected_prev[1] !== last_SG5_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG5_expected_prev);
		$display ("     Real value = %b", SG5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SG5_exp[1] = SG5_expected_prev[1];
	end
	if (
		( SG5_expected_prev[2] !== 1'bx ) && ( SG5_prev[2] !== SG5_expected_prev[2] )
		&& ((SG5_expected_prev[2] !== last_SG5_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG5_expected_prev);
		$display ("     Real value = %b", SG5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SG5_exp[2] = SG5_expected_prev[2];
	end
	if (
		( SG5_expected_prev[3] !== 1'bx ) && ( SG5_prev[3] !== SG5_expected_prev[3] )
		&& ((SG5_expected_prev[3] !== last_SG5_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG5_expected_prev);
		$display ("     Real value = %b", SG5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SG5_exp[3] = SG5_expected_prev[3];
	end
	if (
		( SG5_expected_prev[4] !== 1'bx ) && ( SG5_prev[4] !== SG5_expected_prev[4] )
		&& ((SG5_expected_prev[4] !== last_SG5_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG5_expected_prev);
		$display ("     Real value = %b", SG5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SG5_exp[4] = SG5_expected_prev[4];
	end
	if (
		( SG5_expected_prev[5] !== 1'bx ) && ( SG5_prev[5] !== SG5_expected_prev[5] )
		&& ((SG5_expected_prev[5] !== last_SG5_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG5_expected_prev);
		$display ("     Real value = %b", SG5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SG5_exp[5] = SG5_expected_prev[5];
	end
	if (
		( SG5_expected_prev[6] !== 1'bx ) && ( SG5_prev[6] !== SG5_expected_prev[6] )
		&& ((SG5_expected_prev[6] !== last_SG5_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SG5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SG5_expected_prev);
		$display ("     Real value = %b", SG5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SG5_exp[6] = SG5_expected_prev[6];
	end
	if (
		( led_expected_prev !== 1'bx ) && ( led_prev !== led_expected_prev )
		&& ((led_expected_prev !== last_led_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_led_exp = led_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#40000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module top_clock_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg key3;
reg [1:0] key_b;
reg [3:0] key_in;
// wires                                               
wire [6:0] SG0;
wire [6:0] SG1;
wire [6:0] SG2;
wire [6:0] SG3;
wire [6:0] SG4;
wire [6:0] SG5;
wire led;

wire sampler;                             

// assign statements (if any)                          
top_clock i1 (
// port map - connection between master ports and signals/registers   
	.SG0(SG0),
	.SG1(SG1),
	.SG2(SG2),
	.SG3(SG3),
	.SG4(SG4),
	.SG5(SG5),
	.clk(clk),
	.key3(key3),
	.key_b(key_b),
	.key_in(key_in),
	.led(led)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// key3
initial
begin
	key3 = 1'b0;
end 
// key_b[ 1 ]
initial
begin
	key_b[1] = 1'b0;
end 
// key_b[ 0 ]
initial
begin
	key_b[0] = 1'b0;
end 
// key_in[ 3 ]
initial
begin
	key_in[3] = 1'b1;
	key_in[3] = #12800000 1'b0;
	key_in[3] = #1280000 1'b1;
end 
// key_in[ 2 ]
initial
begin
	key_in[2] = 1'b1;
	key_in[2] = #20480000 1'b0;
	key_in[2] = #1280000 1'b1;
end 
// key_in[ 1 ]
initial
begin
	key_in[1] = 1'b1;
	key_in[1] = #29440000 1'b0;
	key_in[1] = #5120000 1'b1;
end 
// key_in[ 0 ]
initial
begin
	key_in[0] = 1'b1;
	key_in[0] = #36480000 1'b0;
	key_in[0] = #1920000 1'b1;
end 

top_clock_vlg_sample_tst tb_sample (
	.clk(clk),
	.key3(key3),
	.key_b(key_b),
	.key_in(key_in),
	.sampler_tx(sampler)
);

top_clock_vlg_check_tst tb_out(
	.SG0(SG0),
	.SG1(SG1),
	.SG2(SG2),
	.SG3(SG3),
	.SG4(SG4),
	.SG5(SG5),
	.led(led),
	.sampler_rx(sampler)
);
endmodule

