// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/02/2019 16:02:18"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    top_clock
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module top_clock_vlg_sample_tst(
	clk,
	key3,
	key_b,
	key_in,
	sampler_tx
);
input  clk;
input  key3;
input [1:0] key_b;
input [3:0] key_in;
output sampler_tx;

reg sample;
time current_time;
always @(clk or key3 or key_b or key_in)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module top_clock_vlg_check_tst (
	SG0,
	SG1,
	SG2,
	SG3,
	SG4,
	SG5,
	clock_hour,
	clock_minute,
	clock_second,
	led,
	sampler_rx
);
input [6:0] SG0;
input [6:0] SG1;
input [6:0] SG2;
input [6:0] SG3;
input [6:0] SG4;
input [6:0] SG5;
input [7:0] clock_hour;
input [7:0] clock_minute;
input [7:0] clock_second;
input  led;
input sampler_rx;

reg [6:0] SG0_expected;
reg [6:0] SG1_expected;
reg [6:0] SG2_expected;
reg [6:0] SG3_expected;
reg [6:0] SG4_expected;
reg [6:0] SG5_expected;
reg [7:0] clock_hour_expected;
reg [7:0] clock_minute_expected;
reg [7:0] clock_second_expected;
reg  led_expected;

reg [6:0] SG0_prev;
reg [6:0] SG1_prev;
reg [6:0] SG2_prev;
reg [6:0] SG3_prev;
reg [6:0] SG4_prev;
reg [6:0] SG5_prev;
reg [7:0] clock_hour_prev;
reg [7:0] clock_minute_prev;
reg [7:0] clock_second_prev;
reg  led_prev;

reg [7:0] clock_hour_expected_prev;
reg [7:0] clock_minute_expected_prev;
reg [7:0] clock_second_expected_prev;
reg  led_expected_prev;

reg [7:0] last_clock_hour_exp;
reg [7:0] last_clock_minute_exp;
reg [7:0] last_clock_second_exp;
reg  last_led_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	SG0_prev = SG0;
	SG1_prev = SG1;
	SG2_prev = SG2;
	SG3_prev = SG3;
	SG4_prev = SG4;
	SG5_prev = SG5;
	clock_hour_prev = clock_hour;
	clock_minute_prev = clock_minute;
	clock_second_prev = clock_second;
	led_prev = led;
end

// update expected /o prevs

always @(trigger)
begin
	clock_hour_expected_prev = clock_hour_expected;
	clock_minute_expected_prev = clock_minute_expected;
	clock_second_expected_prev = clock_second_expected;
	led_expected_prev = led_expected;
end



// expected led
initial
begin
	led_expected = 1'bX;
	led_expected = #999000 1'b0;
end 
// expected clock_hour[ 7 ]
initial
begin
	clock_hour_expected[7] = 1'bX;
end 
// expected clock_hour[ 6 ]
initial
begin
	clock_hour_expected[6] = 1'bX;
end 
// expected clock_hour[ 5 ]
initial
begin
	clock_hour_expected[5] = 1'bX;
end 
// expected clock_hour[ 4 ]
initial
begin
	clock_hour_expected[4] = 1'bX;
end 
// expected clock_hour[ 3 ]
initial
begin
	clock_hour_expected[3] = 1'bX;
end 
// expected clock_hour[ 2 ]
initial
begin
	clock_hour_expected[2] = 1'bX;
end 
// expected clock_hour[ 1 ]
initial
begin
	clock_hour_expected[1] = 1'bX;
end 
// expected clock_hour[ 0 ]
initial
begin
	clock_hour_expected[0] = 1'bX;
end 
// expected clock_minute[ 7 ]
initial
begin
	clock_minute_expected[7] = 1'bX;
end 
// expected clock_minute[ 6 ]
initial
begin
	clock_minute_expected[6] = 1'bX;
end 
// expected clock_minute[ 5 ]
initial
begin
	clock_minute_expected[5] = 1'bX;
end 
// expected clock_minute[ 4 ]
initial
begin
	clock_minute_expected[4] = 1'bX;
end 
// expected clock_minute[ 3 ]
initial
begin
	clock_minute_expected[3] = 1'bX;
end 
// expected clock_minute[ 2 ]
initial
begin
	clock_minute_expected[2] = 1'bX;
end 
// expected clock_minute[ 1 ]
initial
begin
	clock_minute_expected[1] = 1'bX;
end 
// expected clock_minute[ 0 ]
initial
begin
	clock_minute_expected[0] = 1'bX;
end 
// expected clock_second[ 7 ]
initial
begin
	clock_second_expected[7] = 1'bX;
end 
// expected clock_second[ 6 ]
initial
begin
	clock_second_expected[6] = 1'bX;
end 
// expected clock_second[ 5 ]
initial
begin
	clock_second_expected[5] = 1'bX;
end 
// expected clock_second[ 4 ]
initial
begin
	clock_second_expected[4] = 1'bX;
end 
// expected clock_second[ 3 ]
initial
begin
	clock_second_expected[3] = 1'bX;
end 
// expected clock_second[ 2 ]
initial
begin
	clock_second_expected[2] = 1'bX;
end 
// expected clock_second[ 1 ]
initial
begin
	clock_second_expected[1] = 1'bX;
end 
// expected clock_second[ 0 ]
initial
begin
	clock_second_expected[0] = 1'bX;
end 
// generate trigger
always @(SG0_expected or SG0 or SG1_expected or SG1 or SG2_expected or SG2 or SG3_expected or SG3 or SG4_expected or SG4 or SG5_expected or SG5 or clock_hour_expected or clock_hour or clock_minute_expected or clock_minute or clock_second_expected or clock_second or led_expected or led)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected SG0 = %b | expected SG1 = %b | expected SG2 = %b | expected SG3 = %b | expected SG4 = %b | expected SG5 = %b | expected clock_hour = %b | expected clock_minute = %b | expected clock_second = %b | expected led = %b | ",SG0_expected_prev,SG1_expected_prev,SG2_expected_prev,SG3_expected_prev,SG4_expected_prev,SG5_expected_prev,clock_hour_expected_prev,clock_minute_expected_prev,clock_second_expected_prev,led_expected_prev);
	$display("| real SG0 = %b | real SG1 = %b | real SG2 = %b | real SG3 = %b | real SG4 = %b | real SG5 = %b | real clock_hour = %b | real clock_minute = %b | real clock_second = %b | real led = %b | ",SG0_prev,SG1_prev,SG2_prev,SG3_prev,SG4_prev,SG5_prev,clock_hour_prev,clock_minute_prev,clock_second_prev,led_prev);
`endif
	if (
		( clock_hour_expected_prev[0] !== 1'bx ) && ( clock_hour_prev[0] !== clock_hour_expected_prev[0] )
		&& ((clock_hour_expected_prev[0] !== last_clock_hour_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_hour[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_hour_expected_prev);
		$display ("     Real value = %b", clock_hour_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_clock_hour_exp[0] = clock_hour_expected_prev[0];
	end
	if (
		( clock_hour_expected_prev[1] !== 1'bx ) && ( clock_hour_prev[1] !== clock_hour_expected_prev[1] )
		&& ((clock_hour_expected_prev[1] !== last_clock_hour_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_hour[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_hour_expected_prev);
		$display ("     Real value = %b", clock_hour_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_clock_hour_exp[1] = clock_hour_expected_prev[1];
	end
	if (
		( clock_hour_expected_prev[2] !== 1'bx ) && ( clock_hour_prev[2] !== clock_hour_expected_prev[2] )
		&& ((clock_hour_expected_prev[2] !== last_clock_hour_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_hour[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_hour_expected_prev);
		$display ("     Real value = %b", clock_hour_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_clock_hour_exp[2] = clock_hour_expected_prev[2];
	end
	if (
		( clock_hour_expected_prev[3] !== 1'bx ) && ( clock_hour_prev[3] !== clock_hour_expected_prev[3] )
		&& ((clock_hour_expected_prev[3] !== last_clock_hour_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_hour[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_hour_expected_prev);
		$display ("     Real value = %b", clock_hour_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_clock_hour_exp[3] = clock_hour_expected_prev[3];
	end
	if (
		( clock_hour_expected_prev[4] !== 1'bx ) && ( clock_hour_prev[4] !== clock_hour_expected_prev[4] )
		&& ((clock_hour_expected_prev[4] !== last_clock_hour_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_hour[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_hour_expected_prev);
		$display ("     Real value = %b", clock_hour_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_clock_hour_exp[4] = clock_hour_expected_prev[4];
	end
	if (
		( clock_hour_expected_prev[5] !== 1'bx ) && ( clock_hour_prev[5] !== clock_hour_expected_prev[5] )
		&& ((clock_hour_expected_prev[5] !== last_clock_hour_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_hour[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_hour_expected_prev);
		$display ("     Real value = %b", clock_hour_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_clock_hour_exp[5] = clock_hour_expected_prev[5];
	end
	if (
		( clock_hour_expected_prev[6] !== 1'bx ) && ( clock_hour_prev[6] !== clock_hour_expected_prev[6] )
		&& ((clock_hour_expected_prev[6] !== last_clock_hour_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_hour[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_hour_expected_prev);
		$display ("     Real value = %b", clock_hour_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_clock_hour_exp[6] = clock_hour_expected_prev[6];
	end
	if (
		( clock_hour_expected_prev[7] !== 1'bx ) && ( clock_hour_prev[7] !== clock_hour_expected_prev[7] )
		&& ((clock_hour_expected_prev[7] !== last_clock_hour_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_hour[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_hour_expected_prev);
		$display ("     Real value = %b", clock_hour_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_clock_hour_exp[7] = clock_hour_expected_prev[7];
	end
	if (
		( clock_minute_expected_prev[0] !== 1'bx ) && ( clock_minute_prev[0] !== clock_minute_expected_prev[0] )
		&& ((clock_minute_expected_prev[0] !== last_clock_minute_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_minute[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_minute_expected_prev);
		$display ("     Real value = %b", clock_minute_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_clock_minute_exp[0] = clock_minute_expected_prev[0];
	end
	if (
		( clock_minute_expected_prev[1] !== 1'bx ) && ( clock_minute_prev[1] !== clock_minute_expected_prev[1] )
		&& ((clock_minute_expected_prev[1] !== last_clock_minute_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_minute[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_minute_expected_prev);
		$display ("     Real value = %b", clock_minute_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_clock_minute_exp[1] = clock_minute_expected_prev[1];
	end
	if (
		( clock_minute_expected_prev[2] !== 1'bx ) && ( clock_minute_prev[2] !== clock_minute_expected_prev[2] )
		&& ((clock_minute_expected_prev[2] !== last_clock_minute_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_minute[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_minute_expected_prev);
		$display ("     Real value = %b", clock_minute_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_clock_minute_exp[2] = clock_minute_expected_prev[2];
	end
	if (
		( clock_minute_expected_prev[3] !== 1'bx ) && ( clock_minute_prev[3] !== clock_minute_expected_prev[3] )
		&& ((clock_minute_expected_prev[3] !== last_clock_minute_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_minute[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_minute_expected_prev);
		$display ("     Real value = %b", clock_minute_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_clock_minute_exp[3] = clock_minute_expected_prev[3];
	end
	if (
		( clock_minute_expected_prev[4] !== 1'bx ) && ( clock_minute_prev[4] !== clock_minute_expected_prev[4] )
		&& ((clock_minute_expected_prev[4] !== last_clock_minute_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_minute[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_minute_expected_prev);
		$display ("     Real value = %b", clock_minute_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_clock_minute_exp[4] = clock_minute_expected_prev[4];
	end
	if (
		( clock_minute_expected_prev[5] !== 1'bx ) && ( clock_minute_prev[5] !== clock_minute_expected_prev[5] )
		&& ((clock_minute_expected_prev[5] !== last_clock_minute_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_minute[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_minute_expected_prev);
		$display ("     Real value = %b", clock_minute_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_clock_minute_exp[5] = clock_minute_expected_prev[5];
	end
	if (
		( clock_minute_expected_prev[6] !== 1'bx ) && ( clock_minute_prev[6] !== clock_minute_expected_prev[6] )
		&& ((clock_minute_expected_prev[6] !== last_clock_minute_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_minute[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_minute_expected_prev);
		$display ("     Real value = %b", clock_minute_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_clock_minute_exp[6] = clock_minute_expected_prev[6];
	end
	if (
		( clock_minute_expected_prev[7] !== 1'bx ) && ( clock_minute_prev[7] !== clock_minute_expected_prev[7] )
		&& ((clock_minute_expected_prev[7] !== last_clock_minute_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_minute[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_minute_expected_prev);
		$display ("     Real value = %b", clock_minute_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_clock_minute_exp[7] = clock_minute_expected_prev[7];
	end
	if (
		( clock_second_expected_prev[0] !== 1'bx ) && ( clock_second_prev[0] !== clock_second_expected_prev[0] )
		&& ((clock_second_expected_prev[0] !== last_clock_second_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_second[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_second_expected_prev);
		$display ("     Real value = %b", clock_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_clock_second_exp[0] = clock_second_expected_prev[0];
	end
	if (
		( clock_second_expected_prev[1] !== 1'bx ) && ( clock_second_prev[1] !== clock_second_expected_prev[1] )
		&& ((clock_second_expected_prev[1] !== last_clock_second_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_second[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_second_expected_prev);
		$display ("     Real value = %b", clock_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_clock_second_exp[1] = clock_second_expected_prev[1];
	end
	if (
		( clock_second_expected_prev[2] !== 1'bx ) && ( clock_second_prev[2] !== clock_second_expected_prev[2] )
		&& ((clock_second_expected_prev[2] !== last_clock_second_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_second[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_second_expected_prev);
		$display ("     Real value = %b", clock_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_clock_second_exp[2] = clock_second_expected_prev[2];
	end
	if (
		( clock_second_expected_prev[3] !== 1'bx ) && ( clock_second_prev[3] !== clock_second_expected_prev[3] )
		&& ((clock_second_expected_prev[3] !== last_clock_second_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_second[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_second_expected_prev);
		$display ("     Real value = %b", clock_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_clock_second_exp[3] = clock_second_expected_prev[3];
	end
	if (
		( clock_second_expected_prev[4] !== 1'bx ) && ( clock_second_prev[4] !== clock_second_expected_prev[4] )
		&& ((clock_second_expected_prev[4] !== last_clock_second_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_second[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_second_expected_prev);
		$display ("     Real value = %b", clock_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_clock_second_exp[4] = clock_second_expected_prev[4];
	end
	if (
		( clock_second_expected_prev[5] !== 1'bx ) && ( clock_second_prev[5] !== clock_second_expected_prev[5] )
		&& ((clock_second_expected_prev[5] !== last_clock_second_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_second[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_second_expected_prev);
		$display ("     Real value = %b", clock_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_clock_second_exp[5] = clock_second_expected_prev[5];
	end
	if (
		( clock_second_expected_prev[6] !== 1'bx ) && ( clock_second_prev[6] !== clock_second_expected_prev[6] )
		&& ((clock_second_expected_prev[6] !== last_clock_second_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_second[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_second_expected_prev);
		$display ("     Real value = %b", clock_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_clock_second_exp[6] = clock_second_expected_prev[6];
	end
	if (
		( clock_second_expected_prev[7] !== 1'bx ) && ( clock_second_prev[7] !== clock_second_expected_prev[7] )
		&& ((clock_second_expected_prev[7] !== last_clock_second_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_second[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_second_expected_prev);
		$display ("     Real value = %b", clock_second_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_clock_second_exp[7] = clock_second_expected_prev[7];
	end
	if (
		( led_expected_prev !== 1'bx ) && ( led_prev !== led_expected_prev )
		&& ((led_expected_prev !== last_led_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_led_exp = led_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module top_clock_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg key3;
reg [1:0] key_b;
reg [3:0] key_in;
// wires                                               
wire [6:0] SG0;
wire [6:0] SG1;
wire [6:0] SG2;
wire [6:0] SG3;
wire [6:0] SG4;
wire [6:0] SG5;
wire [7:0] clock_hour;
wire [7:0] clock_minute;
wire [7:0] clock_second;
wire led;

wire sampler;                             

// assign statements (if any)                          
top_clock i1 (
// port map - connection between master ports and signals/registers   
	.SG0(SG0),
	.SG1(SG1),
	.SG2(SG2),
	.SG3(SG3),
	.SG4(SG4),
	.SG5(SG5),
	.clk(clk),
	.clock_hour(clock_hour),
	.clock_minute(clock_minute),
	.clock_second(clock_second),
	.key3(key3),
	.key_b(key_b),
	.key_in(key_in),
	.led(led)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// key3
initial
begin
	key3 = 1'b0;
end 
// key_b[ 1 ]
initial
begin
	key_b[1] = 1'b0;
end 
// key_b[ 0 ]
initial
begin
	key_b[0] = 1'b0;
end 
// key_in[ 3 ]
initial
begin
	key_in[3] = 1'b1;
	key_in[3] = #768000 1'b0;
	key_in[3] = #256000 1'b1;
end 
// key_in[ 2 ]
initial
begin
	key_in[2] = 1'b1;
	key_in[2] = #2304000 1'b0;
	key_in[2] = #384000 1'b1;
end 
// key_in[ 1 ]
initial
begin
	key_in[1] = 1'b1;
end 
// key_in[ 0 ]
initial
begin
	key_in[0] = 1'b1;
	key_in[0] = #3584000 1'b0;
	key_in[0] = #640000 1'b1;
end 

top_clock_vlg_sample_tst tb_sample (
	.clk(clk),
	.key3(key3),
	.key_b(key_b),
	.key_in(key_in),
	.sampler_tx(sampler)
);

top_clock_vlg_check_tst tb_out(
	.SG0(SG0),
	.SG1(SG1),
	.SG2(SG2),
	.SG3(SG3),
	.SG4(SG4),
	.SG5(SG5),
	.clock_hour(clock_hour),
	.clock_minute(clock_minute),
	.clock_second(clock_second),
	.led(led),
	.sampler_rx(sampler)
);
endmodule

