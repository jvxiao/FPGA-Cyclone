// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/07/2018 21:42:01"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    traffic
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module traffic_vlg_sample_tst(
	S,
	clk,
	rst,
	sampler_tx
);
input  S;
input  clk;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(S or clk or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module traffic_vlg_check_tst (
	SEG_g,
	SEG_s,
	cnt,
	country_led,
	main_led,
	state,
	sampler_rx
);
input [6:0] SEG_g;
input [6:0] SEG_s;
input [7:0] cnt;
input [2:0] country_led;
input [2:0] main_led;
input [1:0] state;
input sampler_rx;

reg [6:0] SEG_g_expected;
reg [6:0] SEG_s_expected;
reg [7:0] cnt_expected;
reg [2:0] country_led_expected;
reg [2:0] main_led_expected;
reg [1:0] state_expected;

reg [6:0] SEG_g_prev;
reg [6:0] SEG_s_prev;
reg [7:0] cnt_prev;
reg [2:0] country_led_prev;
reg [2:0] main_led_prev;
reg [1:0] state_prev;

reg [6:0] SEG_g_expected_prev;
reg [6:0] SEG_s_expected_prev;
reg [7:0] cnt_expected_prev;
reg [2:0] country_led_expected_prev;
reg [2:0] main_led_expected_prev;
reg [1:0] state_expected_prev;

reg [6:0] last_SEG_g_exp;
reg [6:0] last_SEG_s_exp;
reg [7:0] last_cnt_exp;
reg [2:0] last_country_led_exp;
reg [2:0] last_main_led_exp;
reg [1:0] last_state_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	SEG_g_prev = SEG_g;
	SEG_s_prev = SEG_s;
	cnt_prev = cnt;
	country_led_prev = country_led;
	main_led_prev = main_led;
	state_prev = state;
end

// update expected /o prevs

always @(trigger)
begin
	SEG_g_expected_prev = SEG_g_expected;
	SEG_s_expected_prev = SEG_s_expected;
	cnt_expected_prev = cnt_expected;
	country_led_expected_prev = country_led_expected;
	main_led_expected_prev = main_led_expected;
	state_expected_prev = state_expected;
end


// expected SEG_g[ 6 ]
initial
begin
	SEG_g_expected[6] = 1'bX;
end 
// expected SEG_g[ 5 ]
initial
begin
	SEG_g_expected[5] = 1'bX;
end 
// expected SEG_g[ 4 ]
initial
begin
	SEG_g_expected[4] = 1'bX;
end 
// expected SEG_g[ 3 ]
initial
begin
	SEG_g_expected[3] = 1'bX;
end 
// expected SEG_g[ 2 ]
initial
begin
	SEG_g_expected[2] = 1'bX;
end 
// expected SEG_g[ 1 ]
initial
begin
	SEG_g_expected[1] = 1'bX;
end 
// expected SEG_g[ 0 ]
initial
begin
	SEG_g_expected[0] = 1'bX;
end 
// expected SEG_s[ 6 ]
initial
begin
	SEG_s_expected[6] = 1'bX;
end 
// expected SEG_s[ 5 ]
initial
begin
	SEG_s_expected[5] = 1'bX;
end 
// expected SEG_s[ 4 ]
initial
begin
	SEG_s_expected[4] = 1'bX;
end 
// expected SEG_s[ 3 ]
initial
begin
	SEG_s_expected[3] = 1'bX;
end 
// expected SEG_s[ 2 ]
initial
begin
	SEG_s_expected[2] = 1'bX;
end 
// expected SEG_s[ 1 ]
initial
begin
	SEG_s_expected[1] = 1'bX;
end 
// expected SEG_s[ 0 ]
initial
begin
	SEG_s_expected[0] = 1'bX;
end 
// expected cnt[ 7 ]
initial
begin
	cnt_expected[7] = 1'bX;
end 
// expected cnt[ 6 ]
initial
begin
	cnt_expected[6] = 1'bX;
end 
// expected cnt[ 5 ]
initial
begin
	cnt_expected[5] = 1'bX;
end 
// expected cnt[ 4 ]
initial
begin
	cnt_expected[4] = 1'bX;
end 
// expected cnt[ 3 ]
initial
begin
	cnt_expected[3] = 1'bX;
end 
// expected cnt[ 2 ]
initial
begin
	cnt_expected[2] = 1'bX;
end 
// expected cnt[ 1 ]
initial
begin
	cnt_expected[1] = 1'bX;
end 
// expected cnt[ 0 ]
initial
begin
	cnt_expected[0] = 1'bX;
end 
// expected country_led[ 2 ]
initial
begin
	country_led_expected[2] = 1'bX;
end 
// expected country_led[ 1 ]
initial
begin
	country_led_expected[1] = 1'bX;
end 
// expected country_led[ 0 ]
initial
begin
	country_led_expected[0] = 1'bX;
end 
// expected main_led[ 2 ]
initial
begin
	main_led_expected[2] = 1'bX;
end 
// expected main_led[ 1 ]
initial
begin
	main_led_expected[1] = 1'bX;
end 
// expected main_led[ 0 ]
initial
begin
	main_led_expected[0] = 1'bX;
end 
// expected state[ 1 ]
initial
begin
	state_expected[1] = 1'bX;
end 
// expected state[ 0 ]
initial
begin
	state_expected[0] = 1'bX;
end 
// generate trigger
always @(SEG_g_expected or SEG_g or SEG_s_expected or SEG_s or cnt_expected or cnt or country_led_expected or country_led or main_led_expected or main_led or state_expected or state)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected SEG_g = %b | expected SEG_s = %b | expected cnt = %b | expected country_led = %b | expected main_led = %b | expected state = %b | ",SEG_g_expected_prev,SEG_s_expected_prev,cnt_expected_prev,country_led_expected_prev,main_led_expected_prev,state_expected_prev);
	$display("| real SEG_g = %b | real SEG_s = %b | real cnt = %b | real country_led = %b | real main_led = %b | real state = %b | ",SEG_g_prev,SEG_s_prev,cnt_prev,country_led_prev,main_led_prev,state_prev);
`endif
	if (
		( SEG_g_expected_prev[0] !== 1'bx ) && ( SEG_g_prev[0] !== SEG_g_expected_prev[0] )
		&& ((SEG_g_expected_prev[0] !== last_SEG_g_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG_g[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG_g_expected_prev);
		$display ("     Real value = %b", SEG_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SEG_g_exp[0] = SEG_g_expected_prev[0];
	end
	if (
		( SEG_g_expected_prev[1] !== 1'bx ) && ( SEG_g_prev[1] !== SEG_g_expected_prev[1] )
		&& ((SEG_g_expected_prev[1] !== last_SEG_g_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG_g[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG_g_expected_prev);
		$display ("     Real value = %b", SEG_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SEG_g_exp[1] = SEG_g_expected_prev[1];
	end
	if (
		( SEG_g_expected_prev[2] !== 1'bx ) && ( SEG_g_prev[2] !== SEG_g_expected_prev[2] )
		&& ((SEG_g_expected_prev[2] !== last_SEG_g_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG_g[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG_g_expected_prev);
		$display ("     Real value = %b", SEG_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SEG_g_exp[2] = SEG_g_expected_prev[2];
	end
	if (
		( SEG_g_expected_prev[3] !== 1'bx ) && ( SEG_g_prev[3] !== SEG_g_expected_prev[3] )
		&& ((SEG_g_expected_prev[3] !== last_SEG_g_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG_g[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG_g_expected_prev);
		$display ("     Real value = %b", SEG_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SEG_g_exp[3] = SEG_g_expected_prev[3];
	end
	if (
		( SEG_g_expected_prev[4] !== 1'bx ) && ( SEG_g_prev[4] !== SEG_g_expected_prev[4] )
		&& ((SEG_g_expected_prev[4] !== last_SEG_g_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG_g[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG_g_expected_prev);
		$display ("     Real value = %b", SEG_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SEG_g_exp[4] = SEG_g_expected_prev[4];
	end
	if (
		( SEG_g_expected_prev[5] !== 1'bx ) && ( SEG_g_prev[5] !== SEG_g_expected_prev[5] )
		&& ((SEG_g_expected_prev[5] !== last_SEG_g_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG_g[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG_g_expected_prev);
		$display ("     Real value = %b", SEG_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SEG_g_exp[5] = SEG_g_expected_prev[5];
	end
	if (
		( SEG_g_expected_prev[6] !== 1'bx ) && ( SEG_g_prev[6] !== SEG_g_expected_prev[6] )
		&& ((SEG_g_expected_prev[6] !== last_SEG_g_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG_g[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG_g_expected_prev);
		$display ("     Real value = %b", SEG_g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SEG_g_exp[6] = SEG_g_expected_prev[6];
	end
	if (
		( SEG_s_expected_prev[0] !== 1'bx ) && ( SEG_s_prev[0] !== SEG_s_expected_prev[0] )
		&& ((SEG_s_expected_prev[0] !== last_SEG_s_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG_s[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG_s_expected_prev);
		$display ("     Real value = %b", SEG_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SEG_s_exp[0] = SEG_s_expected_prev[0];
	end
	if (
		( SEG_s_expected_prev[1] !== 1'bx ) && ( SEG_s_prev[1] !== SEG_s_expected_prev[1] )
		&& ((SEG_s_expected_prev[1] !== last_SEG_s_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG_s[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG_s_expected_prev);
		$display ("     Real value = %b", SEG_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SEG_s_exp[1] = SEG_s_expected_prev[1];
	end
	if (
		( SEG_s_expected_prev[2] !== 1'bx ) && ( SEG_s_prev[2] !== SEG_s_expected_prev[2] )
		&& ((SEG_s_expected_prev[2] !== last_SEG_s_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG_s[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG_s_expected_prev);
		$display ("     Real value = %b", SEG_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SEG_s_exp[2] = SEG_s_expected_prev[2];
	end
	if (
		( SEG_s_expected_prev[3] !== 1'bx ) && ( SEG_s_prev[3] !== SEG_s_expected_prev[3] )
		&& ((SEG_s_expected_prev[3] !== last_SEG_s_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG_s[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG_s_expected_prev);
		$display ("     Real value = %b", SEG_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SEG_s_exp[3] = SEG_s_expected_prev[3];
	end
	if (
		( SEG_s_expected_prev[4] !== 1'bx ) && ( SEG_s_prev[4] !== SEG_s_expected_prev[4] )
		&& ((SEG_s_expected_prev[4] !== last_SEG_s_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG_s[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG_s_expected_prev);
		$display ("     Real value = %b", SEG_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SEG_s_exp[4] = SEG_s_expected_prev[4];
	end
	if (
		( SEG_s_expected_prev[5] !== 1'bx ) && ( SEG_s_prev[5] !== SEG_s_expected_prev[5] )
		&& ((SEG_s_expected_prev[5] !== last_SEG_s_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG_s[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG_s_expected_prev);
		$display ("     Real value = %b", SEG_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SEG_s_exp[5] = SEG_s_expected_prev[5];
	end
	if (
		( SEG_s_expected_prev[6] !== 1'bx ) && ( SEG_s_prev[6] !== SEG_s_expected_prev[6] )
		&& ((SEG_s_expected_prev[6] !== last_SEG_s_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEG_s[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEG_s_expected_prev);
		$display ("     Real value = %b", SEG_s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SEG_s_exp[6] = SEG_s_expected_prev[6];
	end
	if (
		( cnt_expected_prev[0] !== 1'bx ) && ( cnt_prev[0] !== cnt_expected_prev[0] )
		&& ((cnt_expected_prev[0] !== last_cnt_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cnt_exp[0] = cnt_expected_prev[0];
	end
	if (
		( cnt_expected_prev[1] !== 1'bx ) && ( cnt_prev[1] !== cnt_expected_prev[1] )
		&& ((cnt_expected_prev[1] !== last_cnt_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cnt_exp[1] = cnt_expected_prev[1];
	end
	if (
		( cnt_expected_prev[2] !== 1'bx ) && ( cnt_prev[2] !== cnt_expected_prev[2] )
		&& ((cnt_expected_prev[2] !== last_cnt_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cnt_exp[2] = cnt_expected_prev[2];
	end
	if (
		( cnt_expected_prev[3] !== 1'bx ) && ( cnt_prev[3] !== cnt_expected_prev[3] )
		&& ((cnt_expected_prev[3] !== last_cnt_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cnt_exp[3] = cnt_expected_prev[3];
	end
	if (
		( cnt_expected_prev[4] !== 1'bx ) && ( cnt_prev[4] !== cnt_expected_prev[4] )
		&& ((cnt_expected_prev[4] !== last_cnt_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cnt_exp[4] = cnt_expected_prev[4];
	end
	if (
		( cnt_expected_prev[5] !== 1'bx ) && ( cnt_prev[5] !== cnt_expected_prev[5] )
		&& ((cnt_expected_prev[5] !== last_cnt_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cnt_exp[5] = cnt_expected_prev[5];
	end
	if (
		( cnt_expected_prev[6] !== 1'bx ) && ( cnt_prev[6] !== cnt_expected_prev[6] )
		&& ((cnt_expected_prev[6] !== last_cnt_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cnt_exp[6] = cnt_expected_prev[6];
	end
	if (
		( cnt_expected_prev[7] !== 1'bx ) && ( cnt_prev[7] !== cnt_expected_prev[7] )
		&& ((cnt_expected_prev[7] !== last_cnt_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cnt_exp[7] = cnt_expected_prev[7];
	end
	if (
		( country_led_expected_prev[0] !== 1'bx ) && ( country_led_prev[0] !== country_led_expected_prev[0] )
		&& ((country_led_expected_prev[0] !== last_country_led_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port country_led[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", country_led_expected_prev);
		$display ("     Real value = %b", country_led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_country_led_exp[0] = country_led_expected_prev[0];
	end
	if (
		( country_led_expected_prev[1] !== 1'bx ) && ( country_led_prev[1] !== country_led_expected_prev[1] )
		&& ((country_led_expected_prev[1] !== last_country_led_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port country_led[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", country_led_expected_prev);
		$display ("     Real value = %b", country_led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_country_led_exp[1] = country_led_expected_prev[1];
	end
	if (
		( country_led_expected_prev[2] !== 1'bx ) && ( country_led_prev[2] !== country_led_expected_prev[2] )
		&& ((country_led_expected_prev[2] !== last_country_led_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port country_led[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", country_led_expected_prev);
		$display ("     Real value = %b", country_led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_country_led_exp[2] = country_led_expected_prev[2];
	end
	if (
		( main_led_expected_prev[0] !== 1'bx ) && ( main_led_prev[0] !== main_led_expected_prev[0] )
		&& ((main_led_expected_prev[0] !== last_main_led_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port main_led[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", main_led_expected_prev);
		$display ("     Real value = %b", main_led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_main_led_exp[0] = main_led_expected_prev[0];
	end
	if (
		( main_led_expected_prev[1] !== 1'bx ) && ( main_led_prev[1] !== main_led_expected_prev[1] )
		&& ((main_led_expected_prev[1] !== last_main_led_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port main_led[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", main_led_expected_prev);
		$display ("     Real value = %b", main_led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_main_led_exp[1] = main_led_expected_prev[1];
	end
	if (
		( main_led_expected_prev[2] !== 1'bx ) && ( main_led_prev[2] !== main_led_expected_prev[2] )
		&& ((main_led_expected_prev[2] !== last_main_led_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port main_led[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", main_led_expected_prev);
		$display ("     Real value = %b", main_led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_main_led_exp[2] = main_led_expected_prev[2];
	end
	if (
		( state_expected_prev[0] !== 1'bx ) && ( state_prev[0] !== state_expected_prev[0] )
		&& ((state_expected_prev[0] !== last_state_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_state_exp[0] = state_expected_prev[0];
	end
	if (
		( state_expected_prev[1] !== 1'bx ) && ( state_prev[1] !== state_expected_prev[1] )
		&& ((state_expected_prev[1] !== last_state_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_state_exp[1] = state_expected_prev[1];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module traffic_vlg_vec_tst();
// constants                                           
// general purpose registers
reg S;
reg clk;
reg rst;
// wires                                               
wire [6:0] SEG_g;
wire [6:0] SEG_s;
wire [7:0] cnt;
wire [2:0] country_led;
wire [2:0] main_led;
wire [1:0] state;

wire sampler;                             

// assign statements (if any)                          
traffic i1 (
// port map - connection between master ports and signals/registers   
	.S(S),
	.SEG_g(SEG_g),
	.SEG_s(SEG_s),
	.clk(clk),
	.cnt(cnt),
	.country_led(country_led),
	.main_led(main_led),
	.rst(rst),
	.state(state)
);

// S
initial
begin
	S = 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// rst
initial
begin
	rst = 1'b1;
end 

traffic_vlg_sample_tst tb_sample (
	.S(S),
	.clk(clk),
	.rst(rst),
	.sampler_tx(sampler)
);

traffic_vlg_check_tst tb_out(
	.SEG_g(SEG_g),
	.SEG_s(SEG_s),
	.cnt(cnt),
	.country_led(country_led),
	.main_led(main_led),
	.state(state),
	.sampler_rx(sampler)
);
endmodule

